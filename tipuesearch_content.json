{"pages":[{"title":"My Isso Configuration","text":"This post is a part of \" My Isso Style \" Series. Installation Configuration Inside the Database Table Of Contents Server Configuration Client Configuration Server Configuration [general] dbpath = /var/lib/isso/comments.db host = https://snorl.ax notify = smtp log-file = /var/lib/isso/snorl.ax.log gravatar = true gravatar-url = https://www.gravatar.com/avatar/{}?d=https%%3A%%2F%%2Fstatic.snorl.ax%%2Ftheme%%2Fimages%%2Ficon_anonymous.png reply-notifications = true [moderation] enabled = true [guard] enabled = true ratelimit = 1 direct-reply = 3 reply-to-self = true [smtp] host = localhost port = 25 security = none to = sim@snorl.ax from = \"Simputer\" <admin@snorl.ax> timeout = 10 [admin] enabled = false For other options I haven't set u could check the official documentation 1 . In [general] : dbpath is the path of the sqlite database file where I store the data. host is the url where I want the isso to be shown, for isso to be shown in both http and https version, it should be set as: host = http://snorl.ax https://snorl.ax notify is the notification backend for new comments, I set notify = smtp so I'll receive a new email when a new comment is successfully submitted to the server, it also make the reply notification possible. log-file is the path of log showing the status of the isso. gravatar = true enables the use of gravatar. gravatar-url defines url for gravatar images. The \"{}\" is where the email hash will be placed. The value after d= defines the defalut image to show if there is no image associated with the requested email hash. If you choose not to set this option, isso will automatically set the value to identicon, which is a geometric pattern based on an email hash. To set my own default image for the situation, I need to urlencode the url for that image. Now for me https://static.snorl.ax/theme/images/icon_anonymous.png is the url, so I do it with python 2 : $ python Import the required library for it and do it: >>> import urllib.parse >>> the = urllib.parse.quote_plus('https://static.snorl.ax/theme/images/icon_anonymous.png') >>> the.replace('%','%%') Then it'll return the required url-encoded string: 'https%%3A%%2F%%2Fstatic.snorl.ax%%2Ftheme%%2Fimages%%2Ficon_anonymous.png' Now I can set gravatar-url = https://www.gravatar.com/avatar/{}?d=https%%3A%%2F%%2Fstatic.snorl.ax%%2Ftheme%%2Fimages%%2Ficon_anonymous.png to see it working. Normally we don't need to replace % with %% , however in isso if I don't do so, the following error will happen: InterpolationSyntaxError: '%' must be followed by '%' or '(', found: u'%3A%2F%2Fstatic.snorl.ax%2Ftheme%2Fimages%2Ficon_anonymous.png' To know more about how to tango with Gravatar, see the documentation . reply-notification=true enables email notifications of replies to the commenters who have previously subcribed to email notification of replies. In [moderation] : enabled enables comment moderation queue and only affects new comments. Comments in moderation queue are not visible to other users until I activate them. In [guard] : enabled enable guard, for the rest of the section to take into effect. ratelimit is the number of comments each IP address can send in a thread per minute. direct-reply is the number of comments a thread can receive per minute. replt-to-self allows a commenter to reply to his own comment. In [smtp] : host , port , security : the SMTP server, port and security used when a notification is sent through email. Since the isso is located in the same server as my email, the configuration works without password . If u want to set email service on ur server and haven't got a clue, u could check out my post . from : The sender address of the email notification. to : The receiver address of the email notification for every new comments(with their moderation address if moderation is enabled). timeout : Specify a timeout in seconds for blocking operations like the connection attempt. In [admin] : enabled=false disable the administration page in https://isso.snorl.ax/admin/ . No need to open an admin page for that while u could look into the sqlite urself . [server] block has been deleted 'cause it won't work with uwsgi. Client Configuration This is the configuration I use on my site: <section id=comments data-title=\"{{ title }}\" data-isso-id=\"/the/path/to/the/page/\"> <script data-isso=https://isso.snorl.ax/ data-isso-gravatar=true data-isso-avatar=false data-isso-reply-notifications=true data-isso-reply-to-self=true data-isso-css=false src=https://static.snorl.ax/theme/js/embed.min.js data-isso-lang=en></script> For other options I don't use, u can check the official documention . The id of the section is comments , not isso-thread , 'cause I use the edited version of embed.min.js , where I replace all the occurences of isso-thread with comments . That's generally not a recommended practice. Each update of isso will get me busy replacing. So maybe one day I'll revert it back. The data-title parses the title to the database as the title of the thread, not working on the thread existing in the database. data-isso-id resolves the problem when the same page has several urls. (For example, a soft link on a directory can cause the result.) I set data-isso in the script tag 'cause the src is not the original path of the isso. To get Gravatar working on the site, data-isso-gravatar=true data-isso-avatar=false is a must. To enable the reply notifications on the site, data-isso-reply-notifications=true should be set. data-isso-reply-to-self=true allows the commenter to reply to himself. data-isso-lang=en set the language to English. So the language of the running isso on the site won't vary based on the very language the viewer is using. For my css style of isso to get into effect completely without being interfered, data-isso-css=false is a must. Click here to seethe css code inside the embed.min.js of the newest version of isso as of December 27, 2018. Before applying my own css style completely to the running isso, editing the style based on the original code is generally a recommended practice. Isso Official Documentation ↩ Configparser and string with % - StackOverFlow ↩","tags":"pages","url":"https://archives.snorl.ax/my-isso-style/config/"},{"title":"My Isso Style","text":"This post is the index of \" My Isso Style \" Series. Installation Configuration Inside the Database Welcome to My Isso Style! Hope the way I tango with Isso helps u!","tags":"pages","url":"https://archives.snorl.ax/my-isso-style/"},{"title":"Inside The Isso Database","text":"This post is a part of \" My Isso Style \" Series. Installation Configuration Inside the Database Table Of Contents The Tables Ex 1: Delete Comments Ex 2: Approve Comments Ex 3: Delete And Update Threads The Tables Remember the time when the admin interface was not a feature in isso, I submitted two issues in Github: #264 , #270 . Now looking back, I think that more and more questions alike could be there without a knowledge for the very database file we r using. Thus it's really important to get into it 1 . Switch to a user with enough permission to the sqlite databse file and get into the directory where there's database file: $ su isso $ cd ~ It's recommended to backup the database before editing: $ cp comments.db comments.db.bak Now launch the sqlite3 utility. $ sqlite3 Turn the headers on and attach the database to the variable for editing. sqlite> . headers ON sqlite> ATTACH 'comments.db' AS isso ; List the tables. sqlite> . tables The output are three self-explaining table names: isso.comments isso.preferences isso.threads Check the contents in isso.comments : sqlite> SELECT * FROM isso . comments ; Take a glimpse of a part of them: tid|id|parent|created|modified|mode|remote_addr|text|author|email|website|likes|dislikes|voters|notification 1|1||1469977655.38995|1469977994.84019|1|104.86.45.0|Goodbye Disqus! Hello __ISSO__! It's really amazing and I could use __MarkDown__ to comment! __I'm So GLAD To Become an _ISSO USER_!__ BTW, much faster than Disqus!|Sim|sim@snorl.ax||2|0||0 It's a comment table with columns named tid , id , parent , created , modified , mode , remote_addr , text , author , email , website , likes , dislikes , voters , notification . tid : The id of the thread the comment belongs to. id : The id of the comment. parent : If the comment is meant to reply to a comment, then the comment has the id of the comment it's meant to reply to. created : The time when the comment is created. Stored in Unix Time format. modified : The time when the comment is modified. Stored in Unix Time format. mode : 1 if the comment is published. 2 if the comment is waiting for approval. remote_addr : The IP address of the commenter. text : The content of the comment. author : The name of the user. Blank if the user didn't fill in the field. email : The email of the user. Blank if the user didn't fill in the field. website : The url of the website of the user. Blank if the user didn't fill in the field. likes : Likes the comment has received so far. dislikes : Dislikes the comment has received so far. voters : The number of voters of the comments. notification : 1 if the author chose to receive reply notification. Check the contents in isso.preferences : sqlite> SELECT * FROM isso . preferences ; Take a glimpse of it: key|value session-key|s0394578gjhsa23sadjhg23asxcnjk423xjzg2131xzmjhde It's table with a session key. I haven't done anything with it. It might be not much useful in sqlite editing. Check the contents in isso.threads : sqlite> SELECT * FROM isso . threads ; Take a glimpse of a part of them: id|uri|title 1|/terminal/2016/07/12/start-to-use-isso/|Tried ISSO and...... 7|/terminal/2016/05/27/make-full-use-of-cloudflare/|Make full use of CloudFlare 9|/browser/2016/06/04/panic-at-the-disco-bohemian-rhapsody/|Panic! At The Disco - Bohemian Rhapsody It's a thread table with columns named id , uri and title . id : The id of the thread. uri : The URL of the page the thread serves to. title : The title of the thread, used in the title of email notification of the thread. The following examples might help. Ex 1: Delete Comments In the examples above, the contents in isso.comments was checked: sqlite> SELECT * FROM isso . comments ; Take a glimpse of a part of them: tid|id|parent|created|modified|mode|remote_addr|text|author|email|website|likes|dislikes|voters|notification 1|1||1469977655.38995|1469977994.84019|1|104.86.45.0|Goodbye Disqus! Hello __ISSO__! It's really amazing and I could use __MarkDown__ to comment! __I'm So GLAD To Become an _ISSO USER_!__ BTW, much faster than Disqus!|Sim|sim@snorl.ax||2|0||0 7|2||1470373481.55917||1|54.210.166.0|nice blog i like it||||0|0||0 Suppose I'm gonna delete the first comment in the table, that's all I have to do: sqlite> DELETE FROM isso . comments WHERE id = 1 ; To deal similar things with the author Sim, check with care first, to simplify the thngs, only show the column I need: sqlite> SELECT id , author , text FROM isso . comments WHERE author = 'Sim' ; A part of the output: id|author|text 8|Sim| <p> It depends.If u prefer a FBI icon,just do it! </p> 12|Sim| <p> It's not easy to keep balanced diet </p> To delete the first comment of the table: sqlite> DELETE FROM isso . comments WHERE id = 8 ; To delete all of Sim's comments: sqlite> DELETE FROM isso . comments WHERE author = 'Sim' ; To delete all of Anonymous user's comments: sqlite> DELETE FROM isso . comments WHERE author IS NULL ; To delete the comments whose id are between 1 and 7 (1 and 7 included): sqlite> DELETE FROM isso . comments WHERE id >= 1 AND id <= 7 ; To delete the comment of which id is 1 or 7: sqlite> DELETE FROM isso . comments WHERE id == 1 AND id == 7 ; Ex 2: Approve Comments This can be useful when u r not able to receive the moderation link via email. To check all the comments under approval in sqlite: sqlite> SELECT id , author , text FROM isso . comments WHERE mode = 2 ; The output: id|author|text 72|Sim|Test 73|Sim|Test To publish the first comment: sqlite> UPDATE isso . comments SET mode = 1 WHERE id = 72 ; To publish all the comments waiting for approval: sqlite> UPDATE isso . comments SET mode = 1 WHERE mode = 2 ; To delete all the comments waiting for approval: sqlite> DELETE FROM isso . comments WHERE mode = 2 ; Ex 3: Delete And Update Threads To check the threads: sqlite> SELECT * FROM isso . threads ; Take a glimpse of a part of them: id|uri|title 1|/terminal/2016/07/12/start-to-use-isso/|Tried ISSO and...... 7|/terminal/2016/05/27/make-full-use-of-cloudflare/|Make full use of CloudFlare 9|/browser/2016/06/04/panic-at-the-disco-bohemian-rhapsody/|Panic! At The Disco - Bohemian Rhapsody To delete the first thread: sqlite> DELETE FROM isso . threads WHERE id = 1 ; To delete the comments to the first thread: sqlite> DELETE FROM isso . comments WHERE tid = 1 ; To move the comments of the first thread to the second one: sqlite> UPDATE isso . comments SET tid = 7 WHERE tid = 1 ; To check all the threads whose url start with /terminal : sqlite> SELECT * FROM isso . threads WHERE uri LIKE '/terminal%' ; To delete all the threads whose url start with /terminal : sqlite> DELETE FROM isso . threads WHERE uri LIKE '/terminal%' ; To edit the url the third thread is shown on: sqlite> UPDATE isso . threads SET uri = '/the/path/to/it/' WHERE id = 9 ; To edit the third thread's title: sqlite> UPDATE isso . threads SET title = 'The new title' WHERE id = 9 ; SQLite Tutorial - tutorialspoint ↩","tags":"pages","url":"https://archives.snorl.ax/my-isso-style/sql/"},{"title":"The Flask Mega-Tutorial Rereading - Part 3 - One-To-Many Model","text":"Table Of Contents Chapter 7: The Followers Add Model Adding And Removing Follows Obtaining the Posts from Followed Users Combining Own and Followed Posts Unit Testing the User Model Integrating Followers with the Application This tutorial 1 is really amazing and worth my second learning. Chapter 7: The Followers Followers is one example of One-to-many model. Add Model Add followers association table to the database: app/models.py : followers = db . Table ( 'followers' , db . Column ( 'follower_id' , db . Integer , db . ForeignKey ( 'user.id' )), db . Column ( 'followed_id' , db . Integer , db . ForeignKey ( 'user.id' )) ) Declare the many-to-many relationship in the users table: app/models.py : class User ( UserMixin , db . Model ): # ... followed = db . relationship ( 'User' , secondary = followers , primaryjoin = ( followers . c . follower_id == id ), secondaryjoin = ( followers . c . followed_id == id ), backref = db . backref ( 'followers' , lazy = 'dynamic' ), lazy = 'dynamic' ) 'User' is the right side entity of the relationship (the left side entity is the parent class). Since this is a self-referential relationship, the same class is used on both sides. secondary configures the association table that is used for this relationship, which I defined right above this class. primaryjoin indicates the condition that links the left side entity (the follower user) with the association table. The join condition for the left side of the relationship is the user ID matching the follower_id field of the association table. The followers.c.follower_id expression references the follower_id column of the association table. secondaryjoin indicates the condition that links the right side entity (the followed user) with the association table. This condition is similar to the one for primaryjoin, with the only difference that now I'm using followed_id , which is the other foreign key in the association table. backref defines how this relationship will be accessed from the right side entity. From the left side, the relationship is named followed, so from the right side I am going to use the name followers to represent all the left side users that are linked to the target user in the right side. The additional lazy argument indicates the execution mode for this query. A mode of dynamic sets up the query to not run until specifically requested, which is also how I set up the posts one-to-many relationship. lazy is similar to the parameter of the same name in the backref, but this one applies to the left side query instead of the right side. Record the changes: (venv)$ flask db migrate -m \"followers\" (venv)$ flask db upgrade Adding And Removing Follows Follow: user1 . followed . append ( user2 ) Unfollow: user1 . followed . remove ( user2 ) app/models.py : class User ( UserMixin , db . Model ): #... def follow ( self , user ): if not self . is_following ( user ): self . followed . append ( user ) def unfollow ( self , user ): if self . is_following ( user ): self . followed . remove ( user ) def is_following ( self , user ): return self . followed . filter ( followers . c . followed_id == user . id ) . count () > 0 Obtaining the Posts from Followed Users app/models.py : class User ( UserMixin , db . Model ): #... def followed_posts ( self ): return Post . query . join ( followers , ( followers . c . followed_id == Post . user_id )) . filter ( followers . c . follower_id == self . id ) . order_by ( Post . timestamp . desc ()) The struc of it: Post . query . join ( ... ) . filter ( ... ) . order_by ( ... ) Combining Own and Followed Posts app/models.py : def followed_posts ( self ): followed = Post . query . join ( followers , ( followers . c . followed_id == Post . user_id )) . filter ( followers . c . follower_id == self . id ) own = Post . query . filter_by ( user_id = self . id ) return followed . union ( own ) . order_by ( Post . timestamp . desc ()) Unit Testing the User Model tests.py : from datetime import datetime , timedelta import unittest from app import app , db from app.models import User , Post class UserModelCase ( unittest . TestCase ): def setUp ( self ): app . config [ 'SQLALCHEMY_DATABASE_URI' ] = 'sqlite://' db . create_all () def tearDown ( self ): db . session . remove () db . drop_all () def test_password_hashing ( self ): u = User ( username = 'susan' ) u . set_password ( 'cat' ) self . assertFalse ( u . check_password ( 'dog' )) self . assertTrue ( u . check_password ( 'cat' )) def test_avatar ( self ): u = User ( username = 'john' , email = 'john@example.com' ) self . assertEqual ( u . avatar ( 128 ), ( 'https://www.gravatar.com/avatar/' 'd4c74594d841139328695756648b6bd6' '?d=identicon&s=128' )) def test_follow ( self ): u1 = User ( username = 'john' , email = 'john@example.com' ) u2 = User ( username = 'susan' , email = 'susan@example.com' ) db . session . add ( u1 ) db . session . add ( u2 ) db . session . commit () self . assertEqual ( u1 . followed . all (), []) self . assertEqual ( u1 . followers . all (), []) u1 . follow ( u2 ) db . session . commit () self . assertTrue ( u1 . is_following ( u2 )) self . assertEqual ( u1 . followed . count (), 1 ) self . assertEqual ( u1 . followed . first () . username , 'susan' ) self . assertEqual ( u2 . followers . count (), 1 ) self . assertEqual ( u2 . followers . first () . username , 'john' ) u1 . unfollow ( u2 ) db . session . commit () self . assertFalse ( u1 . is_following ( u2 )) self . assertEqual ( u1 . followed . count (), 0 ) self . assertEqual ( u2 . followers . count (), 0 ) def test_follow_posts ( self ): # create four users u1 = User ( username = 'john' , email = 'john@example.com' ) u2 = User ( username = 'susan' , email = 'susan@example.com' ) u3 = User ( username = 'mary' , email = 'mary@example.com' ) u4 = User ( username = 'david' , email = 'david@example.com' ) db . session . add_all ([ u1 , u2 , u3 , u4 ]) # create four posts now = datetime . utcnow () p1 = Post ( body = \"post from john\" , author = u1 , timestamp = now + timedelta ( seconds = 1 )) p2 = Post ( body = \"post from susan\" , author = u2 , timestamp = now + timedelta ( seconds = 4 )) p3 = Post ( body = \"post from mary\" , author = u3 , timestamp = now + timedelta ( seconds = 3 )) p4 = Post ( body = \"post from david\" , author = u4 , timestamp = now + timedelta ( seconds = 2 )) db . session . add_all ([ p1 , p2 , p3 , p4 ]) db . session . commit () # setup the followers u1 . follow ( u2 ) # john follows susan u1 . follow ( u4 ) # john follows david u2 . follow ( u3 ) # susan follows mary u3 . follow ( u4 ) # mary follows david db . session . commit () # check the followed posts of each user f1 = u1 . followed_posts () . all () f2 = u2 . followed_posts () . all () f3 = u3 . followed_posts () . all () f4 = u4 . followed_posts () . all () self . assertEqual ( f1 , [ p2 , p4 , p1 ]) self . assertEqual ( f2 , [ p2 , p3 ]) self . assertEqual ( f3 , [ p3 , p4 ]) self . assertEqual ( f4 , [ p4 ]) if __name__ == '__main__' : unittest . main ( verbosity = 2 ) Integrating Followers with the Application app/routes.py : @app.route ( '/follow/<username>' ) @login_required def follow ( username ): user = User . query . filter_by ( username = username ) . first () if user is None : flash ( 'User {} not found.' . format ( username )) return redirect ( url_for ( 'index' )) if user == current_user : flash ( 'You cannot follow yourself!' ) return redirect ( url_for ( 'user' , username = username )) current_user . follow ( user ) db . session . commit () flash ( 'You are following {}!' . format ( username )) return redirect ( url_for ( 'user' , username = username )) @app.route ( '/unfollow/<username>' ) @login_required def unfollow ( username ): user = User . query . filter_by ( username = username ) . first () if user is None : flash ( 'User {} not found.' . format ( username )) return redirect ( url_for ( 'index' )) if user == current_user : flash ( 'You cannot unfollow yourself!' ) return redirect ( url_for ( 'user' , username = username )) current_user . unfollow ( user ) db . session . commit () flash ( 'You are not following {}.' . format ( username )) return redirect ( url_for ( 'user' , username = username )) app/templates/user.html : ... < h1 > User: {{ user.username }} </ h1 > {% if user.about_me %} < p > {{ user.about_me }} </ p > {% endif %} {% if user.last_seen %} < p > Last seen on: {{ user.last_seen }} </ p > {% endif %} < p > {{ user.followers.count() }} followers, {{ user.followed.count() }} following. </ p > {% if user == current_user %} < p >< a href = \"{{ url_for('edit_profile') }}\" > Edit your profile </ a ></ p > {% elif not current_user.is_following(user) %} < p >< a href = \"{{ url_for('follow', username=user.username) }}\" > Follow </ a ></ p > {% else %} < p >< a href = \"{{ url_for('unfollow', username=user.username) }}\" > Unfollow </ a ></ p > {% endif %} ... The Flask Mega-Tutorial Part VIII: Followers - miguelgrinberg.com ↩","tags":"Terminal","url":"https://archives.snorl.ax/terminal/2019/08/27/the-flask-mega-tutorial-rereading-part-3-one-to-many-model/"},{"title":"Problem Solving with Algorithms and Data Structures - Chapter 3 - Basic Data Structures","text":"Table Of Contents 3.2 What Are Linear Structures 3.3 What is a Stack? 3.4 The Stack Abstract Data Type 3.5 Stack implementation 3.6 Simple Balanced Parentheses 3.7 Balanced Symbols (A General Case) 3.8 Converting Decimal Numbers to Binary Numbers 3.9. Infix, Prefix and Postfix Expressions 3.9.2. General Infix-to-Postfix Conversion 3.9.3. Postfix Evaluation 3.12. Implementing a Queue in Python 3.13. Simulation: Hot Potato 3.2 What Are Linear Structures Linear structures can be thought of as having two ends. Sometimes these ends are referred to as the \"left\" and the \"right\" or in some cases the \"front\" and the \"rear.\" You could also call them the \"top\" and the \"bottom.\" The names given to the ends are not significant. What distinguishes one linear structure from another is the way in which items are added and removed, in particular the location where these additions and removals occur. For example, a structure might allow new items to be added at only one end. Some structures might allow items to be removed from either end. 3.3 What is a Stack? In a word, LIFO, last-in first-out 3.4 The Stack Abstract Data Type Stack Operation Stack Contents Return Value s.isEmpty() [] True s.push(4) [4] s.push('dog') [4,'dog'] s.peek() [4,'dog'] 'dog' s.push(True) [4,'dog',True] s.size() [4,'dog',True] 3 s.isEmpty() [4,'dog',True] False s.push(8.4) [4,'dog',True,8.4] s.pop() [4,'dog',True] 8.4 s.pop() [4,'dog'] True s.size() [4,'dog'] 2 3.5 Stack implementation class Stack : def __init__ ( self ): self . items = [] def isEmpty ( self ): return self . items == [] def push ( self , item ): self . items . append ( item ) def pop ( self ): return self . items . pop () def peek ( self ): return self . items [ len ( self . items ) - 1 ] def size ( self ): return len ( self . items ) s = Stack () print ( s . isEmpty ()) s . push ( 4 ) s . push ( 'dog' ) print ( s . peek ()) s . push ( True ) print ( s . size ()) print ( s . isEmpty ()) s . push ( 8.4 ) print ( s . pop ()) print ( s . pop ()) print ( s . size ()) 3.6 Simple Balanced Parentheses balanced-par.py : class Stack : def __init__ ( self ): self . items = [] def isEmpty ( self ): return self . items == [] def push ( self , item ): self . items . append ( item ) def pop ( self ): return self . items . pop () def peek ( self ): return self . items [ len ( self . items ) - 1 ] def size ( self ): return len ( self . items ) def parChecker ( symbolString ): s = Stack () balanced = True index = 0 while index < len ( symbolString ) and balanced : symbol = symbolString [ index ] if symbol == \"(\" : s . push ( symbol ) else : if s . isEmpty (): balanced = False else : s . pop () index = index + 1 if balanced and s . isEmpty (): return True else : return False print ( parChecker ( '((()))' )) print ( parChecker ( '(()' )) 3.7 Balanced Symbols (A General Case) class Stack : def __init__ ( self ): self . items = [] def isEmpty ( self ): return self . items == [] def push ( self , item ): self . items . append ( item ) def pop ( self ): return self . items . pop () def peek ( self ): return self . items [ len ( self . items ) - 1 ] def size ( self ): return len ( self . items ) def parChecker ( symbolString ): s = Stack () balanced = True index = 0 while index < len ( symbolString ) and balanced : symbol = symbolString [ index ] if symbol in \"([{\" : s . push ( symbol ) else : if s . isEmpty (): balanced = False else : top = s . pop () if not matches ( top , symbol ): balanced = False index = index + 1 if balanced and s . isEmpty (): return True else : return False def matches ( open , close ): opens = \"([{\" closers = \")]}\" return opens . index ( open ) == closers . index ( close ) print ( parChecker ( '{{([][])}()}' )) print ( parChecker ( '[{()]' )) 3.8 Converting Decimal Numbers to Binary Numbers dec-to-bin.py : class Stack : def __init__ ( self ): self . items = [] def isEmpty ( self ): return self . items == [] def push ( self , item ): self . items . append ( item ) def pop ( self ): return self . items . pop () def peek ( self ): return self . items [ len ( self . items ) - 1 ] def size ( self ): return len ( self . items ) def baseConverter ( decNumber , base ): digits = \"0123456789ABCDEF\" remstack = Stack () while decNumber > 0 : rem = decNumber % base remstack . push ( rem ) decNumber = decNumber // base newString = \"\" while not remstack . isEmpty (): newString = newString + digits [ remstack . pop ()] return newString print ( baseConverter ( 25 , 2 )) print ( baseConverter ( 25 , 16 )) 3.9. Infix, Prefix and Postfix Expressions 3.9.2. General Infix-to-Postfix Conversion stack.py : class Stack : def __init__ ( self ): self . items = [] def isEmpty ( self ): return self . items == [] def push ( self , item ): self . items . append ( item ) def pop ( self ): return self . items . pop () def peek ( self ): return self . items [ len ( self . items ) - 1 ] def size ( self ): return len ( self . items ) infix2postfix.py from stack import Stack def infixToPostfix ( infixexpr ): prec = {} prec [ \"*\" ] = 3 prec [ \"/\" ] = 3 prec [ \"+\" ] = 2 prec [ \"-\" ] = 2 prec [ \"(\" ] = 1 opStack = Stack () postfixList = [] tokenList = infixexpr . split () for token in tokenList : if token in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or token in \"0123456789\" : postfixList . append ( token ) elif token == '(' : opStack . push ( token ) elif token == ')' : topToken = opStack . pop () while topToken != '(' : postfixList . append ( topToken ) topToken = opStack . pop () else : while ( not opStack . isEmpty ()) and \\ ( prec [ opStack . peek ()] >= prec [ token ]): postfixList . append ( opStack . pop ()) opStack . push ( token ) while not opStack . isEmpty (): postfixList . append ( opStack . pop ()) return \" \" . join ( postfixList ) print ( infixToPostfix ( \"A * B + C * D\" )) print ( infixToPostfix ( \"( A + B ) * C - ( D - E ) * ( F + G )\" )) Result: A B * C D * + A B + C * D E - F G + * - 3.9.3. Postfix Evaluation postfixeval.py from stack import Stack def postfixEval ( postfixExpr ): operandStack = Stack () tokenList = postfixExpr . split () for token in tokenList : if token in \"0123456789\" : operandStack . push ( int ( token )) else : operand2 = operandStack . pop () operand1 = operandStack . pop () result = doMath ( token , operand1 , operand2 ) operandStack . push ( result ) return operandStack . pop () def doMath ( op , op1 , op2 ): if op == \"*\" : return op1 * op2 elif op == \"/\" : return op1 / op2 elif op == \"+\" : return op1 + op2 else : return op1 - op2 print ( postfixEval ( '7 8 + 3 2 + /' )) Result: 3.0 3.12. Implementing a Queue in Python queue.py : class Queue : def __init__ ( self ): self . items = [] def isEmpty ( self ): return self . items == [] def enqueue ( self , item ): self . items . insert ( 0 , item ) def dequeue ( self ): return self . items . pop () def size ( self ): return len ( self . items ) 3.13. Simulation: Hot Potato hotpotato.py : from queue import Queue def hotPotato ( namelist , num ): simqueue = Queue () for name in namelist : simqueue . enqueue ( name ) while simqueue . size () > 1 : for i in range ( num ): simqueue . enqueue ( simqueue . dequeue ()) simqueue . dequeue () return simqueue . dequeue () print ( hotPotato ([ \"Bill\" , \"David\" , \"Susan\" , \"Jane\" , \"Kent\" , \"Brad\" ], 7 ))","tags":"Terminal","url":"https://archives.snorl.ax/terminal/2019/06/27/problem-solving-with-algorithms-and-data-structures-chapter-3-basic-data-structures/"},{"title":"Problem Solving with Algorithms and Data Structures - Chapter 2 - Analysis","text":"Table Of Contents 2.1. Objectives 2.2. What Is Algorithm Analysis 2.3 Big-O Notation 2.4. An Anagram Detection Example 2.5. Performance of Python Data Structures 2.6. Lists 2.7. Dictionaries This book is amazing, last section of the last chapter blew my mind 1 . 2.1. Objectives To understand why algorithm analysis is important. To be able to use \"Big-O\" to describe execution time. To understand the \"Big-O\" execution time of common operations on Python lists and dictionaries. To understand how the implementation of Python data impacts algorithm analysis. To understand how to benchmark simple Python programs. 2.2. What Is Algorithm Analysis Write readable code. perf.py : import time def perf_wrapper ( method , num ): start = time . time () theSum = method ( * num ) end = time . time () return theSum , end - start def sumOfN ( n ): theSum = 0 for i in range ( 1 , n + 1 ): theSum = theSum + i return theSum def sumOfN_op ( n ): theSum = n * ( n + 1 ) / 2 return theSum def sum_perf_check ( method , num ): for i in range ( 5 ): print ( \"Sum is %d required %10.7f seconds\" % perf_wrapper ( method , num )) print ( \"Before the algorithm is optimized:\" ) check_set = [ 10 ** n for n in range ( 2 , 8 )] for num in check_set : sum_perf_check ( sumOfN ,[ num ]) print ( \"After the algorithm is optimized:\" ) for num in check_set : sum_perf_check ( sumOfN_op ,[ num ]) Output of perf.py : Before the algorithm is optimized: Sum is 5050 required 0.0000110 seconds Sum is 5050 required 0.0000076 seconds Sum is 5050 required 0.0000069 seconds Sum is 5050 required 0.0000069 seconds Sum is 5050 required 0.0000069 seconds Sum is 500500 required 0.0000796 seconds Sum is 500500 required 0.0000989 seconds Sum is 500500 required 0.0000939 seconds Sum is 500500 required 0.0001440 seconds Sum is 500500 required 0.0001280 seconds Sum is 50005000 required 0.0013959 seconds Sum is 50005000 required 0.0008447 seconds Sum is 50005000 required 0.0008399 seconds Sum is 50005000 required 0.0008893 seconds Sum is 50005000 required 0.0013807 seconds Sum is 5000050000 required 0.0081816 seconds Sum is 5000050000 required 0.0075161 seconds Sum is 5000050000 required 0.0074959 seconds Sum is 5000050000 required 0.0074937 seconds Sum is 5000050000 required 0.0074308 seconds Sum is 500000500000 required 0.0759306 seconds Sum is 500000500000 required 0.0759892 seconds Sum is 500000500000 required 0.0759845 seconds Sum is 500000500000 required 0.0772898 seconds Sum is 500000500000 required 0.0759218 seconds Sum is 50000005000000 required 0.7791717 seconds Sum is 50000005000000 required 0.7657561 seconds Sum is 50000005000000 required 0.7915492 seconds Sum is 50000005000000 required 0.7761276 seconds Sum is 50000005000000 required 0.7596998 seconds After the algorithm is optimized: Sum is 5050 required 0.0000050 seconds Sum is 5050 required 0.0000010 seconds Sum is 5050 required 0.0000010 seconds Sum is 5050 required 0.0000007 seconds Sum is 5050 required 0.0000005 seconds Sum is 500500 required 0.0000012 seconds Sum is 500500 required 0.0000007 seconds Sum is 500500 required 0.0000007 seconds Sum is 500500 required 0.0000007 seconds Sum is 500500 required 0.0000005 seconds Sum is 50005000 required 0.0000007 seconds Sum is 50005000 required 0.0000005 seconds Sum is 50005000 required 0.0000007 seconds Sum is 50005000 required 0.0000005 seconds Sum is 50005000 required 0.0000005 seconds Sum is 5000050000 required 0.0000007 seconds Sum is 5000050000 required 0.0000010 seconds Sum is 5000050000 required 0.0000007 seconds Sum is 5000050000 required 0.0000007 seconds Sum is 5000050000 required 0.0000007 seconds Sum is 500000500000 required 0.0000005 seconds Sum is 500000500000 required 0.0000005 seconds Sum is 500000500000 required 0.0000007 seconds Sum is 500000500000 required 0.0000007 seconds Sum is 500000500000 required 0.0000005 seconds Sum is 50000005000000 required 0.0000005 seconds Sum is 50000005000000 required 0.0000010 seconds Sum is 50000005000000 required 0.0000005 seconds Sum is 50000005000000 required 0.0000005 seconds Sum is 50000005000000 required 0.0000005 seconds 2.3 Big-O Notation It's a method to characterize an algorithm's efficiency in terms of execution time. Example: a = 5 b = 6 c = 10 for i in range ( n ): for j in range ( n ): x = i * i y = j * j z = i * j for k in range ( n ): w = a * k + 45 v = b * b d = 33 T(n) = 3 + 3n 2 + 2n + 1 = 3n 2 + 2n + 4 The fragment of the code: O(n 2 ) 2.4. An Anagram Detection Example Solution 1: Checking Off O(n 2 ) Solution 2: Sort and Compare O(nlogn) or O(n 2 ) due to sort Solution 3: Brute Force (Never good) Solution 4: Count and Compare O(n) 2.5. Performance of Python Data Structures In later chapters you will see some possible implementations of both lists and dictionaries and how the performance depends on the implementation. 2.6. Lists list_perf.py : from timeit import Timer def test1 (): l = [] for i in range ( 1000 ): l = l + [ i ] def test2 (): l = [] for i in range ( 1000 ): l . append ( i ) def test3 (): l = [ i for i in range ( 1000 )] def test4 (): l = list ( range ( 1000 )) t1 = Timer ( \"test1()\" , \"from __main__ import test1\" ) print ( \"concat \" , t1 . timeit ( number = 1000 ), \"milliseconds\" ) t2 = Timer ( \"test2()\" , \"from __main__ import test2\" ) print ( \"append \" , t2 . timeit ( number = 1000 ), \"milliseconds\" ) t3 = Timer ( \"test3()\" , \"from __main__ import test3\" ) print ( \"comprehension \" , t3 . timeit ( number = 1000 ), \"milliseconds\" ) t4 = Timer ( \"test4()\" , \"from __main__ import test4\" ) print ( \"list range \" , t4 . timeit ( number = 1000 ), \"milliseconds\" ) Result of list_perf.py : concat 1.9500927650005906 milliseconds append 0.11545232799835503 milliseconds comprehension 0.062062365002930164 milliseconds list range 0.0495129260016256 milliseconds Operation Big-O Efficiency index [] O(1) index assignment O(1) append O(1) pop() O(1) pop(i) O(n) insert(i,item) O(n) del operator O(n) iteration O(n) contains (in) O(n) get slice [x:y] O(k) del slice O(n) set slice O(n+k) reverse O(n) concatenate O(k) sort O(n log n) multiply O(nk) popperf.py : import timeit popzero = timeit . Timer ( \"x.pop(0)\" , \"from __main__ import x\" ) popend = timeit . Timer ( \"x.pop()\" , \"from __main__ import x\" ) x = list ( range ( 2000000 )) print ( \"x.pop(0) execution time: %f s\" % popzero . timeit ( number = 1000 )) x = list ( range ( 2000000 )) print ( \"x.pop() execution time: %f s\" % popend . timeit ( number = 1000 )) Result of popperf.py : x.pop(0) execution time: 2.256239s x.pop() execution time: 0.000111s popperf_2.py : from timeit import Timer popzero = Timer ( \"x.pop(0)\" , \"from __main__ import x\" ) popend = Timer ( \"x.pop()\" , \"from __main__ import x\" ) print ( \"pop(0) pop()\" ) for i in range ( 1000000 , 100000001 , 1000000 ): x = list ( range ( i )) pt = popend . timeit ( number = 1000 ) x = list ( range ( i )) pz = popzero . timeit ( number = 1000 ) print ( \" %15.5f , %15.5f \" % ( pz , pt )) Result of popperf_2.py : pop(0) pop() 0.94833, 0.00010 2.04151, 0.00011 3.24372, 0.00011 4.37107, 0.00011 5.42274, 0.00012 6.68484, 0.00011 7.64100, 0.00011 8.23122, 0.00011 9.99637, 0.00011 11.55539, 0.00012 12.92389, 0.00026 13.31022, 0.00012 14.33949, 0.00011 16.14405, 0.00011 17.22286, 0.00014 17.30630, 0.00013 18.30070, 0.00014 19.25390, 0.00013 20.32429, 0.00017 21.64347, 0.00014 22.62368, 0.00013 23.68417, 0.00013 24.95661, 0.00011 25.84395, 0.00011 27.02810, 0.00011 29.19760, 0.00011 30.58301, 0.00011 31.83124, 0.00011 32.58386, 0.00016 33.32165, 0.00011 35.25702, 0.00011 36.03567, 0.00011 36.56381, 0.00012 38.86707, 0.00011 39.97921, 0.00011 39.82716, 0.00011 41.63275, 0.00011 43.04904, 0.00011 ...... 2.7. Dictionaries operation Big-O Efficiency copy O(n) get item O(1) set item O(1) delete item O(1) contains (in) O(1) iteration O(n) dict_perf.py : import timeit import random for i in range ( 10000 , 1000001 , 20000 ): t = timeit . Timer ( \"random.randrange( %d ) in x\" % i , \"from __main__ import random,x\" ) x = list ( range ( i )) lst_time = t . timeit ( number = 1000 ) x = { j : None for j in range ( i )} d_time = t . timeit ( number = 1000 ) print ( \" %d , %10.3f , %10.3f \" % ( i , lst_time , d_time )) Result of dict_perf.py : 10000, 0.119, 0.001 30000, 0.366, 0.002 50000, 0.612, 0.002 70000, 0.914, 0.003 90000, 1.193, 0.003 110000, 1.381, 0.003 130000, 1.708, 0.003 150000, 1.984, 0.002 170000, 2.283, 0.003 190000, 2.660, 0.003 210000, 2.880, 0.002 230000, 2.918, 0.002 250000, 1.782, 0.001 270000, 1.881, 0.001 290000, 2.034, 0.001 310000, 2.122, 0.001 330000, 2.254, 0.001 350000, 2.473, 0.002 370000, 2.502, 0.001 390000, 2.844, 0.002 410000, 3.044, 0.001 430000, 3.268, 0.001 450000, 3.170, 0.002 470000, 3.398, 0.002 490000, 3.607, 0.002 510000, 3.740, 0.001 530000, 3.844, 0.002 550000, 4.131, 0.001 570000, 4.102, 0.002 590000, 4.418, 0.002 610000, 4.413, 0.002 630000, 4.829, 0.002 650000, 4.717, 0.003 670000, 5.037, 0.001 690000, 5.114, 0.002 710000, 5.599, 0.002 730000, 5.634, 0.002 750000, 5.669, 0.002 770000, 5.701, 0.001 790000, 5.745, 0.002 810000, 5.985, 0.002 830000, 6.167, 0.001 850000, 6.496, 0.002 870000, 6.966, 0.002 890000, 6.906, 0.001 910000, 6.333, 0.001 930000, 7.055, 0.001 950000, 6.709, 0.001 970000, 7.176, 0.002 990000, 6.942, 0.001 Dictionary is consitently faster than list. The only dictionary operations that are not O(1) are those that require iteration. Problem Solving with Algorithms and Data Structures using Python ↩","tags":"Terminal","url":"https://archives.snorl.ax/terminal/2019/06/23/problem-solving-with-algorithms-and-data-structures-chapter-2-analysis/"},{"title":"Problem Solving with Algorithms and Data Structures - Chapter 1 - Introduction","text":"Table Of Contents 1.8. Getting Started with Data Operators Data Types List Operators Methods String Methods Tuple Set Operators Methods Dictionary Operators Methods 1.9 Input and Output String Formatting with % % types Number Dealing 1.10 Control Structures List Comprehension 1.11 Exception Handling 1.12 Function Defining 1.13 Object-Oriented Programming in Python: Defining Classes 1.13.1 A Fraction Class 1.13.2 Inheritance: Logic Gates and Circuits Refreshing my knowledges about algorithms in a Python way 1 . 1.8. Getting Started with Data Operators Operator Explanation < Less Than > Greater Than <= Less Than Or Equal to >= More Than Or Equal To == Equal To != Not Equal To and Both Operands True for the result to be True or Either or both of the operands True for the result to be True not Negates the original boolean value, False to True, True to False Data Types List Operators [ ] : Access an element of a sequence concatenation + : Combine sequences together * : Concatenate a repeated number of times (Reference the original value) in : Ask whether an item is in a sequence len : Ask the number of items in the sequence [ : ] : Extract a part of a sequence Methods alist.append(item) : Adds a new item to the end of a list alist.insert(i,item) : Inserts an item at the ith position in a list alist.pop() : Removes and returns the last item in a list alist.pop(i) : Removes and returns the ith item in a list alist.sort() : Modifies a list to be sorted alist.reverse() : Modifies a list to be in reverse order del alist[i] : Deletes the item in the ith position alist.index(item) : Returns the index of the first occurrence of item alist.count(item) : Returns the number of occurrences of item alist.remove(item) : Removes the first occurrence of item String Methods astring.center(w) : Returns a string centered in a field of size w astring.count(item) : Returns the number of occurrences of item in the string astring.ljust(w) : Returns a string left-justified in a field of size w astring.lower() : Returns a string in all lowercase astring.rjust(w) : Returns a string right-justified in a field of size w astring.find(item) : Returns the index of the first occurrence of item astring.split(schar) : Splits a string into substrings at schar Tuple Similar to list the difference is that the members in a tuple is immutable. >>> myTuple [ 1 ] = False Traceback ( most recent call last ): File \"<pyshell#137>\" , line 1 , in - toplevel - myTuple [ 1 ] = False TypeError : object doesn 't support item assignment Set A set is an unordered collection of zero or more immutable Python data objects. Sets do not allow duplicates and are written as comma-delimited values enclosed in curly braces. The empty set is represented by set() . Sets are heterogeneous, and the collection can be assigned to a variable as below. >>> { 3 , 6 , \"cat\" , 4.5 , False } { False , 4.5 , 3 , 6 , 'cat' } >>> mySet = { 3 , 6 , \"cat\" , 4.5 , False } >>> mySet { False , 4.5 , 3 , 6 , 'cat' } >>> Operators in : Set membership len : Returns the cardinality of the set aset | otherset : Returns a new set with all elements from both sets aset & otherset : Returns a new set with only those elements common to both sets aset - otherset : Returns a new set with all items from the first set not in second aset <= otherset : Asks whether all elements of the first set are in the second Methods aset.union(otherset) : Returns a new set with all elements from both sets. The same result as aset | otherset aset.intersection(otherset) : Returns a new set with only those elements common to both sets. The same result as aset & otherset aset.difference(otherset) : Returns a new set with all items from first set not in second. The same result as aset - otherset aset.issubset(otherset) : Asks whether all elements of one set are in the other aset.add(item) : Adds item to the set aset.remove(item) : Removes item from the set aset.pop() : Removes an arbitrary element from the set aset.clear() : Removes all elements from the set Dictionary Dictionaries are collections of associated pairs of items where each pair consists of a key and a value. Operators myDict[k] : Returns the value associated with k, otherwise its an error key in adict : Returns True if key is in the dictionary, False otherwise del adict[key] : Removes the entry from the dictionary Methods adict.keys() : Returns the keys of the dictionary in a dict_keys object adict.values() : Returns the values of the dictionary in a dict_values object adict.items() : Returns the key-value pairs in a dict_items object adict.get(k) : Returns the value associated with k, None otherwise adict.get(k,alt) : Returns the value associated with k, alt otherwise 1.9 Input and Output input(\"prompt message\") get a string from the input. String Formatting with % >>> \" %s %d \" % ( \"aa\" , 1 ) 'aa 1' >>> \" %(aa)s %(bb)d \" % { \"aa\" : \"aa\" , \"bb\" : 1 } 'aa 1' % types Character Output Format d , i Integer u Unsigned integer f Floating point as m.ddddd e Floating point as m.ddddde+/-xx E Floating point as m.dddddE+/-xx g Use %e for exponents less than −4 or greater than +5, otherwise use %f c Single character s String, or any Python data object that can be converted to a string by using the str function. % Insert a literal % character Number Dealing Modifier Example Description number %20d Put the value in a field width of 20 - %-20d Put the value in a field 20 characters wide, left-justified + %+20d Put the value in a field 20 characters wide, right-justified 0 %020d Put the value in a field 20 characters wide, fill in with leading zeros. . %20.2f Put the value in a field 20 characters wide with 2 characters to the right of the decimal point. (name) %(name)d Get the value from the supplied dictionary using name as the key. 1.10 Control Structures while keeps running until the condition is not met. for keeps iterating over all the members of a collection until all of them have been iterated over. The statements under if will be executed once the condition is met, otherwise python will check if the condition in elif is met, if not then next elif , stops at else (If no else then none of the statements will be executed). List Comprehension >>> sqlist = [ x * x for x in range ( 1 , 11 )] >>> sqlist [ 1 , 4 , 9 , 16 , 25 , 36 , 49 , 64 , 81 , 100 ] >>> sqlist = [ x * x for x in range ( 1 , 11 ) if x % 2 != 0 ] >>> sqlist [ 1 , 9 , 25 , 49 , 81 ] >>> [ ch . upper () for ch in 'comprehension' if ch not in 'aeiou' ] [ 'C' , 'M' , 'P' , 'R' , 'H' , 'N' , 'S' , 'N' ] 1.11 Exception Handling >>> try : ... print ( a ) ... except Exception as err : ... print ( type ( err )) ... for arg in err . args : ... print ( arg ) ... < class ' NameError '> name 'a' is not defined 1.12 Function Defining >>> def square ( n ): ... return n ** 2 ... >>> square ( 3 ) 9 >>> square ( square ( 3 )) 81 1.13 Object-Oriented Programming in Python: Defining Classes 1.13.1 A Fraction Class fractionthing.py def gcd ( m , n ): while m % n != 0 : oldm = m oldn = n m = oldn n = oldm % oldn return n class Fraction : def __init__ ( self , top , bottom ): self . num = top self . den = bottom def show ( self ): print ( self . num , \"/\" , self . den ) def __str__ ( self ): return str ( self . num ) + \"/\" + str ( self . den ) def __add__ ( self , otherfraction ): newnum = self . num * otherfraction . den + otherfraction . num * self . den newden = self . den * otherfraction . den com = gcd ( newnum , newden ) return Fraction ( newnum // com , newden // com ) def __eq__ ( self , other ): firstnum = self . num * other . den secondnum = self . den * other . num return firstnum == secondnum >>> from fractionthing import Fraction >>> a = Fraction ( 10 , 12423 ) >>> a . show () 10 / 12423 >>> a < test . Fraction object at 0x7f764f0e70f0 > >>> str ( a ) '10/12423' >>> print ( a ) 10 / 12423 >>> a . __str__ () '10/12423' >>> b = Fraction ( 7 , 123782161 ) >>> a + b < test . Fraction object at 0x7f764f1039e8 > >>> c = a + b >>> print ( c ) 1237908571 / 1537745786103 >>> a == b False >>> a . __eq__ ( b ) False 1.13.2 Inheritance: Logic Gates and Circuits Self-Check: class LogicGate : def __init__ ( self , n ): self . name = n self . output = None def getName ( self ): return self . name def getOutput ( self ): self . output = self . performGateLogic () return self . output class BinaryGate ( LogicGate ): def __init__ ( self , n ): LogicGate . __init__ ( self , n ) self . pinA = None self . pinB = None def getPinA ( self ): if self . pinA == None : return int ( input ( \"Enter Pin A input for gate \" + self . getName () + \"-->\" )) else : return self . pinA . getFrom () . getOutput () def getPinB ( self ): if self . pinB == None : return int ( input ( \"Enter Pin B input for gate \" + self . getName () + \"-->\" )) else : return self . pinB . getFrom () . getOutput () def setNextPin ( self , source ): if self . pinA == None : self . pinA = source else : if self . pinB == None : self . pinB = source else : print ( \"Cannot Connect: NO EMPTY PINS on this gate\" ) class AndGate ( BinaryGate ): def __init__ ( self , n ): BinaryGate . __init__ ( self , n ) def performGateLogic ( self ): a = self . getPinA () b = self . getPinB () if a == 1 and b == 1 : return 1 else : return 0 class OrGate ( BinaryGate ): def __init__ ( self , n ): BinaryGate . __init__ ( self , n ) def performGateLogic ( self ): a = self . getPinA () b = self . getPinB () if a == 1 or b == 1 : return 1 else : return 0 class UnaryGate ( LogicGate ): def __init__ ( self , n ): LogicGate . __init__ ( self , n ) self . pin = None def getPin ( self ): if self . pin == None : return int ( input ( \"Enter Pin input for gate \" + self . getName () + \"-->\" )) else : return self . pin . getFrom () . getOutput () def setNextPin ( self , source ): if self . pin == None : self . pin = source else : print ( \"Cannot Connect: NO EMPTY PINS on this gate\" ) class NotGate ( UnaryGate ): def __init__ ( self , n ): UnaryGate . __init__ ( self , n ) def performGateLogic ( self ): if self . getPin (): return 0 else : return 1 class NorGate ( BinaryGate ): def __init__ ( self , n ): BinaryGate . __init__ ( self , n ) def performGateLogic ( self ): self . pinA = self . getPinA () self . pinB = self . getPinB () if self . pinA == 0 and self . pinB == 0 : return 1 else : return 0 class NandGate ( BinaryGate ): def __init__ ( self , n ): BinaryGate . __init__ ( self , n ) def performGateLogic ( self ): self . pinA = self . getPinA () self . pinB = self . getPinB () if self . pinA == 0 or self . pinB == 0 : return 1 else : return 0 class Connector : def __init__ ( self , fgate , tgate ): self . fromgate = fgate self . togate = tgate tgate . setNextPin ( self ) def getFrom ( self ): return self . fromgate def getTo ( self ): return self . togate def main (): g1 = AndGate ( \"G1\" ) g2 = AndGate ( \"G2\" ) g3 = NorGate ( \"G3\" ) g5 = NotGate ( \"G5\" ) g6 = NotGate ( \"G6\" ) g7 = AndGate ( \"G7\" ) c1 = Connector ( g1 , g3 ) c2 = Connector ( g2 , g3 ) c3 = Connector ( g1 , g5 ) c4 = Connector ( g2 , g6 ) c5 = Connector ( g5 , g7 ) c6 = Connector ( g6 , g7 ) print ( g3 . getOutput () == g7 . getOutput ()) main () Problem Solving with Algorithms and Data Structures using Python ↩","tags":"Terminal","url":"https://archives.snorl.ax/terminal/2019/06/19/problem-solving-with-algorithms-and-data-structures-chapter-1-introduction/"},{"title":"The Flask Mega-Tutorial Rereading - Part 2","text":"Table Of Contents Chapter 7: Error Handling Debug Mode Custom Error Pages Sending Errors by Email Testing Approach 1: DubuggingServer in python Testing Approach 2: Real Email Server Logging to a File Fixing the Duplicate Username Bug This tutorial 1 is really amazing and worth my second learning. Chapter 7: Error Handling Debug Mode $ export FLASK_DEBUG = 1 $ flask run The browser allows you to see the error in detail. Custom Error Pages Use the decorator @app.errorhandler . app/errors.py - Custom error handlers from flask import render_template from app import app , db @app.errorhandler ( 404 ) def not_found_error ( error ): return render_template ( '404.html' ), 404 @app.errorhandler ( 500 ) def internal_error ( error ): db . session . rollback () return render_template ( '500.html' ), 500 app/__init__.py - Import error handlers # ... from app import routes , models , errors Sending Errors by Email config.py - Email configuration class Config ( object ): # ... MAIL_SERVER = os . environ . get ( 'MAIL_SERVER' ) or \"localhost\" MAIL_PORT = int ( os . environ . get ( 'MAIL_PORT' ) or 25 ) MAIL_USE_TLS = os . environ . get ( 'MAIL_USE_TLS' ) is not None MAIL_USERNAME = os . environ . get ( 'MAIL_USERNAME' ) MAIL_PASSWORD = os . environ . get ( 'MAIL_PASSWORD' ) ADMINS = [ 'your-email@example.com' ] app/__init__.py - Log errors by email import logging from logging.handlers import SMTPHandler # ... if not app . debug : if app . config [ 'MAIL_SERVER' ]: auth = None if app . config [ 'MAIL_USERNAME' ] or app . config [ 'MAIL_PASSWORD' ]: auth = ( app . config [ 'MAIL_USERNAME' ], app . config [ 'MAIL_PASSWORD' ]) secure = None if app . config [ 'MAIL_USE_TLS' ]: secure = () mail_handler = SMTPHandler ( mailhost = ( app . config [ 'MAIL_SERVER' ], app . config [ 'MAIL_PORT' ]), fromaddr = 'no-reply@' + app . config [ 'MAIL_SERVER' ], toaddrs = app . config [ 'ADMINS' ], subject = 'Microblog Failure' , credentials = auth , secure = secure ) mail_handler . setLevel ( logging . ERROR ) app . logger . addHandler ( mail_handler ) Testing Approach 1: DubuggingServer in python This is a fake email server that accepts emails, but instead of sending them, it prints them to the console. To run this server, open a second terminal session and run the following command on it: (venv) $ python -m smtpd -n -c DebuggingServer localhost:8025 Then export MAIL_PORT=8025 before flask run . Testing Approach 2: Real Email Server export MAIL_SERVER=smtp.googlemail.com export MAIL_PORT=587 export MAIL_USE_TLS=1 export MAIL_USERNAME=<your-gmail-username> export MAIL_PASSWORD=<your-gmail-password> Logging to a File app/__init__.py - Logging to a file # ... from logging.handlers import RotatingFileHandler import os # ... if not app . debug : # ... if not os . path . exists ( 'logs' ): os . mkdir ( 'logs' ) file_handler = RotatingFileHandler ( 'logs/microblog.log' , maxBytes = 10240 , backupCount = 10 ) file_handler . setFormatter ( logging . Formatter ( ' %(asctime)s %(levelname)s : %(message)s [in %(pathname)s : %(lineno)d ]' )) file_handler . setLevel ( logging . INFO ) app . logger . addHandler ( file_handler ) app . logger . setLevel ( logging . INFO ) app . logger . info ( 'Microblog startup' ) Fixing the Duplicate Username Bug app/forms.py - Validate username in edit profile form. class EditProfileForm ( FlaskForm ): username = StringField ( 'Username' , validators = [ DataRequired ()]) about_me = TextAreaField ( 'About me' , validators = [ Length ( min = 0 , max = 140 )]) submit = SubmitField ( 'Submit' ) def __init__ ( self , original_username , * args , ** kwargs ): super ( EditProfileForm , self ) . __init__ ( * args , ** kwargs ) self . original_username = original_username def validate_username ( self , username ): if username . data != self . original_username : user = User . query . filter_by ( username = self . username . data ) . first () if user is not None : raise ValidationError ( 'Please use a different username.' ) app/routes.py - Validate username in edit profile form. ... @app.route ( '/edit_profile' , methods = [ 'GET' , 'POST' ]) @login_required def edit_profile (): form = EditProfileForm ( current_user . username ) # ... The Flask Mega-Tutorial Part I: Hello, World! - miguelgrinberg.com ↩","tags":"Terminal","url":"https://archives.snorl.ax/terminal/2019/06/19/the-flask-mega-tutorial-rereading-part-2/"},{"title":"Running through The Flask Mega-Tutorial Again","text":"Table Of Contents Chapter 1: Hello, World! Chapter 2: Templates Chapter 3: Web Forms Chapter 4: Database Chapter 5: User Logins Password Hashing Introduction to Flask-Login Preparing The User Model for Flask-Login User Loader FUnction Logging Users In Logging Users Out Requiring Users To Login Showing The Logged In User in Templates User Registration Chapter 6: Profile Pages Avatars Using Jinja2 Sub-Templates More Interesting Profiles Recording The Last Visit Time For a User Profile Editor This tutorial 1 is really amazing and worth my second learning. Chapter 1: Hello, World! This chapter talks about setting up virtualenv for the flask app and the structure is looking like this: microblog/ venv/ app/ __init__.py routes.py microblog.py Then I need to set environment variable: $ FLASK_APP = microblog.py Then run in the working dir: $ flask run That's quite organized but I found it's not mandatory. All I need is this: microblog/ venv/ microblog.py Then put things I need together in microblog.py along with extra lines to run the app 2 : from flask import Flask app = Flask ( __name__ ) @app.route ( '/' ) @app.route ( '/index' ) def index (): return \"Hello world!\" if __name__ == \"__main__\" : app . run () Then I could execute it through atom or terminal with a simple command: $ python /home/sim/python-projects/microblog/app.py Or set environment var and do that way. However, that structure in the tutorial is more modular and makes everything clearer so I followed the structure. To remember the env var automatically each time flask is executed: $ pip install python-dotenv Then inside .flaskenv : FLASK_APP=microblog.py Involved module: from flask import Flask Chapter 2: Templates It's things about jinja2. I've been tangoing with it 3 these days. So okay to me as well. Involved module: from flask import render_template Chapter 3: Web Forms app.config['SECRET_KEY'] from os.environ.get . A login form with 'POST' and 'GET' method allowed. Package: flask-wtf Involved modules: from flask_wtf import FlaskForm from wtforms import StringField , PasswordField , BooleanField , SubmitField from wtforms.validators import DataRequired Data response. Involved modules: from flask import flash , redirect The flashed messages can be obtained through get_flashed_messages . * url_for is also introduced. from flask import url_for Chapter 4: Database Package: flask-sqlalchemy (Flask-friendly wrapper to the popular SQLAlchemy package) flask-migrate (This extension is a Flask wrapper for Alembic, a database migration framework for SQLAlchemy.) from flask_sqlalchemy import SQLAlchemy from flask_migrate import Migrate Then Configure SQLALCHEMY_DATABASE_URI and SQLALCHEMY_TRACK_MODIFICATIONS . Create models Creating The Migration Repository The First Database Migration Database Upgrade and Downgrade Workflow Database Relationships Additionally sometimes when developing in sqlite I need to drop a column I need to edit the recent migration script in migrations by changing the upgrade function 4 : from olembic import op #They already have this ... def upgrade (): with op . batch_alter_table ( 'table_name' ) as batch_op : batch_op . drop_column ( 'the_column_to_remove' ) ... Chapter 5: User Logins Password Hashing Introduction to Flask-Login Preparing The User Model for Flask-Login User Loader Function Logging Users In Logging Users Out Requiring Users To Login Showing The Logged In User in Templates User Registration Import: Password Hashing from werkzeug.security import generate_password_hash , check_password_hash # generate_password_hash is a function receiving a string parameter and hashing it to an encrypted string. Different returned hash even for the same password. # check_password_hash is a function receiving two parameters, first being a hash, second being a string parameter as a password to see if the original password from the hash is the same as the password. Introduction to Flask-Login New package needed: flask-login from flask_login import LoginManager # LoginManager is a function receiving Flask app object as a parameter # LoginManager(app=None, add_context_processor=True)[source] Preparing The User Model for Flask-Login # ... from flask_login import UserMixin # UserMixin provides generic implementations that are appropriate for most user model classes class User ( UserMixin , db . Model ): User Loader FUnction from app import login # Here login is an object created from LoginManager function # ... @login.user_loader def load_user ( id ): return User . query . get ( id ) Logging Users In # ... from flask_login import current_user , login_user from app.models import User # ... # User Class: is_authenticated, is_active, is_anonymous, get_id() # login_user(user, remember=False, duration=None, force=False, fresh=True) # current_user: A proxy for the current user. Logging Users Out # ... from flask_login import logout_user # ... # logout_user(): Log the current user out Requiring Users To Login from flask_login import login_required # login_required(func) does the trick from flask import request from werkzeug.urls import url_parse ... next_page = request . args . get ( 'next' ) # This get the argument next, useful in this case if not next_page or url_parse ( next_page ) . netloc != '' : next_page = url_for ( 'index' ) ... #Usage above Showing The Logged In User in Templates Jinja2 things User Registration A form similar to login form with from flask_wtf import FlaskForm from wtforms import StringField , PasswordField , BooleanField , SubmitField from wtforms.validators import ValidationError , DataRequired , Email , EqualTo from app.models import User # ... class RegistrationForm ( FlaskForm ): username = StringField ( 'Username' , validators = [ DataRequired ()]) email = StringField ( 'Email' , validators = [ DataRequired (), Email ()]) password = PasswordField ( 'Password' , validators = [ DataRequired ()]) password2 = PasswordField ( 'Repeat Password' , validators = [ DataRequired (), EqualTo ( 'password' )]) submit = SubmitField ( 'Register' ) def validate_username ( self , username ): user = User . query . filter_by ( username = username . data ) . first () if user is not None : raise ValidationError ( 'Please use a different username.' ) def validate_email ( self , email ): user = User . query . filter_by ( email = email . data ) . first () if user is not None : raise ValidationError ( 'Please use a different email address.' ) THen jinja2 things. P.S. Hmm, to work in atom, install linter-pylint , linter-pycodestyle This pylintrc is helpful: [MASTER] load-plugins = pylint_flask, pylint_sqlalchemy ignored-modules = flask_sqlalchemy Chapter 6: Profile Pages Create a route with @login_required function passing queried user and posts to the returned template Edit the template to include the vars Include profile link in the nav Avatars Hash the email and use it in the url >>> from hashlib import md5 >>> 'https://www.gravatar.com/avatar/' + md5 ( b 'john@example.com' ) . hexdigest () 'https://www.gravatar.com/avatar/d4c74594d841139328695756648b6bd6' Available argument in the url: d : default avatar, can be a url-encoded url. s : size Automatize the process in the module as a function to the User model. Using Jinja2 Sub-Templates A sub-template _post reference it in the profile template More Interesting Profiles Add two columns about_me , last_seen to the User model. Insert them in the profile template Recording The Last Visit Time For a User @app.before_request function to generate time and save it the column last_seen of the given user. Profile Editor A FlaskForm object A template for it. @app.route with methods=['GET', 'POST'] The Flask Mega-Tutorial Part I: Hello, World! - miguelgrinberg.com ↩ Setting Up a Flask Application ↩ Mail subject customization by SnorlaxYum · Pull Request #553 · posativ/isso ↩ Dropping SQLite Columns Using Flask-Migrate - YouTube ↩","tags":"Terminal","url":"https://archives.snorl.ax/terminal/2019/05/31/running-through-the-flask-mega-tutorial-again/"},{"title":"Notes on MDN Web Docs Javascript Guide","text":"After learning from YDJS for a while, I did some practice. At first I searched for some ideas, and then I decided to do a clock 1 . Then you can see it on the home page of the site 2 , with the image changing every 5 seconds randomly. In the origin project, setTimeout seems to be a viable choice. But when it comes to two different elements that need different intervals, setInterval comes in handy. setTimeout won't support two functions with different intervals. That's what I experienced. They both serve as js timing functions 3 . Now I prefer setInterval . Anyway, it might be too early for me to start with YDJS, though it's a good book. So I decided to switch to MDN Web Docs 4 instead. I only takes what seems new to me 'cause it seems that I've been acquiainted with many of the contents. Table Of Contents Grammer And Types Control flow and error handling Block statement switch statement Exception handling statements Promises Loops and iteration Functions Rest parameters Shorter functions No seperate this Predefined functions Expressions and operators Destructuring in assignment Relational operators in instanceof Expressions Primary expressions Left-hand-side expressions Spread Operator Numbers and dates Numbers Decimal numbers Binary numbers Octal Numbers Hexadecimal numbers Exponentiation Number object Math object Date object Text Formatting Strings String literals String Objects Multi-line template literals Multi-lines Embedded expressions Internationalization Date and time formatting Number formatting Collation Regular Expressions Indexed collections Arrays Typed Arrays Keyed collections Grammer And Types Multiple lines usage in string literals: var poem = 'Roses are red,\\n\\ Violets are blue.\\n\\ Sugar is sweet,\\n\\ and so is foo.' Template Literals 5 from ECMAScript 2015 as a new way for multiple lines string literals: var poem = `Roses are red, Violets are blue. Sugar is sweet, and so is foo.` Control flow and error handling Block statement Starting with ECMAScript2015, the let and const variable declarations are block scoped. switch statement It's almost the same as C. An exceptional example is located at switch section at Chapter 5 in this note 6 . Exception handling statements Throw exceptions: throw statement Handle exceptions: try...catch statement try { something ; } catch ( e ) { something ; } finally { finalthing ; } It's similar to this in Python: try : something except Exception as e : something finally : finalthing e is an identifier for the error thrown. finally will be executed whether the e happens. e has properties name amd message in js, similar to type(e) and e.args in Python. Promises Starting with ECMAScript2015, JavaScript gains support for Promise objects 7 allowing you to control the flow of deferred and asynchronous operations. imgLoad example: function imgLoad ( url ) { return new Promise ( function ( resolve , reject ) { var request = new XMLHttpRequest (); request . open ( 'GET' , url ); request . responseType = 'blob' ; request . onload = function () { if ( request . status === 200 ) { resolve ( request . response ); } else { reject ( Error ( 'Image didn\\'t load successfully; error code:' + request . statusText )); } }; request . onerror = function () { reject ( Error ( 'There was a network error.' )); }; request . send (); }); } resolve when the task succeeds, reject otherwise. 7 Loops and iteration Loops in js: for statement do...while statement while statement labeled statement break statement continue statement for...in statement for...of statement The first 6: Similar to C. for .. in : When used on objects, return all the property names(keys). WHen used in arrays, return from 0 to (array.length - 1) for .. of : When used on objects, return all the property values(values). When used in arrays return from array[0] to array[array.length-1] Functions declarations: name, paramters, statements inside curly brackets. In js, functions can be defined in var form: var fun_name = function () { statements ;} As I learned from YDJS, function is also a object. With this , a var assignment from a function can be assigned property keys and values. With the needed parameters a function can be executed and complete what has been defined in it. Vars defined inside a function has its scope of execution inside. Things like recursion, nests, no difference from C. arguments is a function-scope var containing a list of parameters passed to the function. Default parameters: undefined , can be set to other values. Rest parameters Example says everything: function multiply ( multiplier , ... theArgs ) { return theArgs . map ( x => multiplier * x ); } var arr = multiply ( 2 , 1 , 2 , 3 ); console . log ( arr ); // [2, 4, 6] Shorter functions var a = [ 'Hydrogen' , 'Helium' , 'Lithium' , 'Beryllium' ]; var a2 = a . map ( function ( s ) { return s . length ; }); console . log ( a2 ); // logs [8, 6, 7, 9] var a3 = a . map ( s => s . length ); console . log ( a3 ); // logs [8, 6, 7, 9] No seperate this function Person () { // The Person() constructor defines `this` as itself. this . age = 0 ; setInterval ( function growUp () { // In nonstrict mode, the growUp() function defines `this` // as the global object, which is different from the `this` // defined by the Person() constructor. this . age ++ ; }, 1000 ); } var p = new Person (); Solution: function Person () { var self = this ; // Some choose `that` instead of `self`. // Choose one and be consistent. self . age = 0 ; setInterval ( function growUp () { // The callback refers to the `self` variable of which // the value is the expected object. self . age ++ ; }, 1000 ); } Arrow function doesn't have its own this , so viable directly: function Person () { this . age = 0 ; setInterval (() => { this . age ++ ; // |this| properly refers to the person object }, 1000 ); } var p = new Person (); Predefined functions eval() : The eval() method evaluates JavaScript code represented as a string. uneval() : The uneval() method creates a string representation of the source code of an Object. isFinite() : The global isFinite() function determines whether the passed value is a finite number. If needed, the parameter is first converted to a number. isNaN() : The isNaN() function determines whether a value is NaN or not. Note: coercion inside the isNaN function has interesting rules; you may alternatively want to use Number.isNaN(), as defined in ECMAScript 2015, or you can use typeof to determine if the value is Not-A-Number. parseFloat() : The parseFloat() function parses a string argument and returns a floating point number. parseInt() : The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems). decodeURI() : The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI or by a similar routine. decodeURIComponent() : The decodeURIComponent() method decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine. encodeURI() : The encodeURI() method encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters). encodeURIComponent() : The encodeURIComponent() method encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters). escape() : The deprecated escape() method computes a new string in which certain characters have been replaced by a hexadecimal escape sequence. Use encodeURI or encodeURIComponent instead. unescape() : The deprecated unescape() method computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Because unescape() is deprecated, use decodeURI() or decodeURIComponent instead. Expressions and operators Assignment Operator: = Compound operators: += , <<= , >>>= , |= etc. Destructuring in assignment var foo = [ 'one' , 'two' , 'three' ]; // without destructuring var one = foo [ 0 ]; var two = foo [ 1 ]; var three = foo [ 2 ]; // with destructuring var [ one , two , three ] = foo ; Comparison operators: == , >= , === , etc. Arithmetic operators: % , ++ , etc. Bitwise operators: | , & , << etc. Logical operators: && , || , ! String operators: + Conditional operator: ? Coma operator: var x = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] var a = [ x , x , x , x , x ]; for ( var i = 0 , j = 9 ; i <= j ; i ++ , j -- ) console . log ( 'a[' + i + '][' + j + ']= ' + a [ i ][ j ]); Unary operators: delete , typeof , void . < a href = \"javascript:void(0)\" > Click here to do nothing </ a > < a href = \"javascript:void(document.form.submit())\" > Click here to submit </ a > Relational operators in // Arrays var trees = [ 'redwood' , 'bay' , 'cedar' , 'oak' , 'maple' ]; 0 in trees ; // returns true 3 in trees ; // returns true 6 in trees ; // returns false 'bay' in trees ; // returns false (you must specify the index number, // not the value at that index) 'length' in trees ; // returns true (length is an Array property) // built-in objects 'PI' in Math ; // returns true var myString = new String ( 'coral' ); 'length' in myString ; // returns true // Custom objects var mycar = { make : 'Honda' , model : 'Accord' , year : 1998 }; 'make' in mycar ; // returns true 'model' in mycar ; // returns true instanceof var theDay = new Date ( 1995 , 12 , 17 ); if ( theDay instanceof Date ) { // statements to execute } Expressions Arithmetic: evaluates to a number, for example 3.14159. (Generally uses arithmetic operators.) String: evaluates to a character string, for example, \"Fred\" or \"234\". (Generally uses string operators.) Logical: evaluates to true or false. (Often involves logical operators.) Primary expressions Basic keywords and general expressions in JavaScript. this : current object () : control precedence. Left-hand-side expressions Left values are the destination of an assignment. new : create an instance. super : call on objects' parent 8 Spread Operator Use with array: var parts = [ 'shoulders' , 'knees' ]; var lyrics = [ 'head' , ... parts , 'and' , 'toes' ]; Use with function calls: function f ( x , y , z ) { } var args = [ 0 , 1 , 2 ]; f (... args ); Numbers and dates Numbers Decimal numbers 1234567890 42 // Caution when using leading zeros: 0888 // 888 parsed as decimal 0777 // parsed as octal in non-strict mode (511 in decimal) Binary numbers Leading with 0b and 0B : var FLT_SIGNBIT = 0b10000000000000000000000000000000 ; // 2147483648 var FLT_EXPONENT = 0b01111111100000000000000000000000 ; // 2139095040 var FLT_MANTISSA = 0B00000000011111111111111111111111 ; // 8388607 Octal Numbers Leading with zeros: var n = 0755 ; // 493 var m = 0644 ; // 420 Leading with 0o : var a = 0o10 ; // ES2015: 8 Hexadecimal numbers Leading with 0x or 0X : 0xFFFFFFFFFFFFFFFFF // 295147905179352830000 0x123456789ABCDEF // 81985529216486900 0XA // 10 Exponentiation 1 E3 // 1000 2 e6 // 2000000 0.1e2 // 10 Number object Different built-in properties and functions are listed with their links, respectively there . Math object Built-in properties: Math.PI Built-in Functions: Math.floor(), Math.min(), etc. ( Information ) Date object Create a new one: var dateObjectName = new Date ([ parameters ]); Example 1: var today = new Date (); var endYear = new Date ( 1995 , 11 , 31 , 23 , 59 , 59 , 999 ); // Set day and month endYear . setFullYear ( today . getFullYear ()); // Set year to this year var msPerDay = 24 * 60 * 60 * 1000 ; // Number of milliseconds per day var daysLeft = ( endYear . getTime () - today . getTime ()) / msPerDay ; var daysLeft = Math . round ( daysLeft ); //returns days left in the year Example 2: function JSClock () { var time = new Date (); var hour = time . getHours (); var minute = time . getMinutes (); var second = time . getSeconds (); var temp = '' + (( hour > 12 ) ? hour - 12 : hour ); if ( hour == 0 ) temp = '12' ; temp += (( minute < 10 ) ? ':0' : ':' ) + minute ; temp += (( second < 10 ) ? ':0' : ':' ) + second ; temp += ( hour >= 12 ) ? ' P.M.' : ' A.M.' ; return temp ; } Text Formatting Strings String literals Simple: 'foo' \"bar\" Hexadecimal escape sequences: '\\xA9' // \"©\" Unicode escape sequences: '\\u00A9' // \"©\" Unicode code point escapes: '\\u{2F804}' // the same with simple Unicode escapes '\\uD87E\\uDC04' String Objects const foo = new String ( 'foo' ); // Creates a String object console . log ( foo ); // Displays: [String: 'foo'] typeof foo ; // Returns 'object' const firstString = '2 + 2' ; // Creates a string literal value const secondString = new String ( '2 + 2' ); // Creates a String object eval ( firstString ); // Returns the number 4 eval ( secondString ); // Returns the string \"2 + 2\" No need to create a String object, 'cause its methods could be called on String literals (js auto converts it to a String object and execute the methods, then discards that temporary object). Multi-line template literals Multi-lines Traditional: console . log ( 'string text line 1\\n\\ string text line 2' ); // \"string text line 1 // string text line 2\" Now: console . log ( `string text line 1 string text line 2` ); // \"string text line 1 // string text line 2\" Embedded expressions const five = 5 ; const ten = 10 ; console . log ( 'Fifteen is ' + ( five + ten ) + ' and not ' + ( 2 * five + ten ) + '.' ); // \"Fifteen is 15 and not 20.\" Internationalization Date and time formatting const msPerDay = 24 * 60 * 60 * 1000 ; // July 17, 2014 00:00:00 UTC. const july172014 = new Date ( msPerDay * ( 44 * 365 + 11 + 197 )); const options = { year : '2-digit' , month : '2-digit' , day : '2-digit' , hour : '2-digit' , minute : '2-digit' , timeZoneName : 'short' }; const americanDateTime = new Intl . DateTimeFormat ( 'en-US' , options ). format ; console . log ( americanDateTime ( july172014 )); // 07/16/14, 5:00 PM PDT Number formatting const gasPrice = new Intl . NumberFormat ( 'en-US' , { style : 'currency' , currency : 'USD' , minimumFractionDigits : 3 } ); console . log ( gasPrice . format ( 5 . 259 )); // $ 5 . 259 const hanDecimalRMBInChina = new Intl . NumberFormat ( 'zh-CN-u-nu-hanidec' , { style : 'currency' , currency : 'CNY' } ); console . log ( hanDecimalRMBInChina . format ( 1314 . 25 )); // ￥ 一 , 三一四 . 二五 Collation The Collator object is useful for comparing and sorting strings. const names = [ 'Hochberg' , 'Hönigswald' , 'Holzman' ]; const germanPhonebook = new Intl . Collator ( 'de-DE-u-co-phonebk' ); // as if sorting [\"Hochberg\", \"Hoenigswald\", \"Holzman\"]: console . log ( names . sort ( germanPhonebook . compare ). join ( ', ' )); // logs \"Hochberg, Hönigswald, Holzman\" const germanDictionary = new Intl . Collator ( 'de-DE-u-co-dict' ); // as if sorting [\"Hochberg\", \"Honigswald\", \"Holzman\"]: console . log ( names . sort ( germanDictionary . compare ). join ( ', ' )); // logs \"Hochberg, Holzman, Hönigswald\" Regular Expressions Creating a regular expression Special Chars Indexed collections Arrays Similar to array I know. Can be populated with own Property . Has forEach function to do a set function on each element . Typed Arrays They have self descriptive names and provide views for all the usual numeric types like Int8 , Uint32 , Float64 and so forth. Keyed collections Guide Map: Similar to dictionaries in python. Weakmap: Keys of WeakMaps are of the type Object only. Primitive data types as keys are not allowed (e.g. a Symbol can't be a WeakMap key). One difference to Map objects is that WeakMap keys are not enumerable (i.e., there is no method giving you a list of the keys). If they were, the list would depend on the state of garbage collection, introducing non-determinism. Set: A value in a Set may only occur once; it is unique in the Set's collection. Weakset: In contrast to Sets, WeakSets are collections of objects only and not of arbitrary values of any type. The WeakSet is weak: References to objects in the collection are held weakly. If there is no other reference to an object stored in the WeakSet, they can be garbage collected. That also means that there is no list of current objects stored in the collection. WeakSets are not enumerable. Here Are 10 Projects You Can Do To Build Your JavaScript Skills ↩ The homepage of the site ↩ JavaScript Timing Events ↩ JavaScript Guide - JavaScript | MDN ↩ Template literals (Template strings) - JavaScript | MDN ↩ Notes on Types & Grammer (YDJS) ↩ Promise - JavaScript | MDN ↩ ↩ super - JavaScript | MDN ↩","tags":"Terminal","url":"https://archives.snorl.ax/terminal/2019/05/23/notes-on-mdn-web-docs-javascript-guide/"},{"title":"Notes on Async & Performance (YDJS)","text":"Seems I've taken rather complicated note one the last one. Table Of Contents Chapter 1: Asynchrony: Now & Later A Program in Chunks Async Console Event Loop Parallel Threading Concurrency Noninteracting Interaction Cooperation Jobs Statement Ordering Chapter 2: Callbacks Continuations Sequential Brain Doing Versus Planning Nested/Chained Callbacks Trust Issues Tale of Five Callbacks Not Just Others' Code Trying to Save Callbacks Review Chapter 3: Promises Chapter 1: Asynchrony: Now & Later One of the most essential parts in language like ja is about how to express and manipulate program over time. Before getting there, it's helpful to understand much more deeply what asynchrony is and how it operates in JS. A Program in Chunks now chunk: stuff that runs now. later chunk: stuff that runs later. Async Console console.log differs between different browsers. Some doesn't output the result immediately. Event Loop It acts as a queue, first-in, first-out. Parallel Threading In a parallel system, avoid the different actions on the same variable, which might lead to unexpected results (different orders, different results on the same codes). race condition : function ordering nondeterminism. Concurrency The single-threaded event loop is one expression of concurrency with sequential results. Noninteracting If two concurrent processes act independently, the code will behave right regardless of ordering. Interaction Do things to coordinate interactions between processes: Push two individuals into the array( arrvar.push(thing) ) and make sure the order: determine the order in advance Assign value to var a and var b in different processes and need them both at the same time: make sure a && b returns true in if . Different call on the same variable a and may cause unexpected result: if (a == undefined) Cooperation An Ajax response handler that needs to run through a long list of results to transform the values: var res = []; // `response(..)` receives array of results from the Ajax call function response ( data ) { // let's just do 1000 at a time var chunk = data . splice ( 0 , 1000 ); // add onto existing `res` array res = res . concat ( // make a new transformed array with all `chunk` values doubled chunk . map ( function ( val ){ return val * 2 ; } ) ); // anything left to process? if ( data . length > 0 ) { // async schedule next batch setTimeout ( function (){ response ( data ); }, 0 ); } } // ajax(..) is some arbitrary Ajax function given by a library ajax ( \"http://some.url.1\" , response ); ajax ( \"http://some.url.2\" , response ); setTimeout(..0) is not technically inserting an item directly onto the event loop queue. The timer will insert the event at its next opportunity. Not guaranteed to process in call order. There's not a single direct way (at least yet) across all environments to ensure async event ordering. This topic will be covered in more detail in the next section. Jobs Job Queue : New concept in ES6. Make the job implemented later, but as soon as possible . Statement Ordering The order in which we express statements in our code is not necessarily the same order as the JS engine will execute them. That may seem like quite a strange assertion to make. Chapter 2: Callbacks callback : the target for the event loop to \"call back into\" the program, whenever that item in the queue is processed. The callback function is the async work horse for JavaScript, and it does its job respectably. A couple of these is explored in the chapter. Continuations First half executes immediately, then pause at the callback function to get the response, then continue with the second half. Sequential Brain JS would probably feel like a sequential brain, switching to various different processes constantly. Doing Versus Planning The reason it's so hard to accrately author and reason about async JS code with callbacks: it's not how our brain works. Nested/Chained Callbacks callback hells : callback continuations are happening simultaneously . Trust Issues inversion of control : you take part of your program and give over control of its execution to another third party Tale of Five Callbacks Investing an awful lot of ad hoc logic in every and single callback leads to callback hell . Not Just Others' Code Necessary to do inversion of control . Trying to Save Callbacks trust issues: There's nothing about either callback that prevents or filters unwanted repeated invocations. Being never called Too Early ES6 has arrived on the scene with some great answers to these trust issues. Review We need a generalized solution to all of the trust issues , one that can be reused for as many callbacks as we create without all the extra boilerplate overhead. We need something better than callbacks. They've served us well to this point, but the future of JavaScript demands more sophisticated and capable async patterns. Chapter 3: Promises To b continued......","tags":"Terminal","url":"https://archives.snorl.ax/terminal/2019/05/17/notes-on-async-performance-ydjs/"},{"title":"Notes on Types & Grammer (YDJS)","text":"Just started taking notes. Forgot to take notes on the former three. To summerize, js is about one object linked to another. A lot to learn for me. So it's best to learn it quickly the first time and then start learning by doing. I'll try Firebase function. Table Of Contents Chapter 1 Chapter 2 Chapter 3 Chapter 4 Converting values Abstract Value Operations ToString JSON Stringification toNumber toBoolean Falsy Values Falsy Objects Truthy Values Explicit Coercion Strings <==> Numbers Date To Number The Curious Case of the ~ Truncating Bits Explicitly: Parsing Numeric Strings Parsing Non-Strings Explicitly: * --> Boolean Implicit Coercion Simplifying Implicitly Implicitly: Strings <==> Numbers Implicitly: Booleans --> Numbers Implicitly: * --> Boolean Operators || and && Symbol Coercion Loose Equals vs. Strict Equals Equality Performance Abstract Equality Comparing: strings to numbers Comparing: anything to boolean Comparing: nulls to undefineds Comparing: objects to non-objects Edge Cases A Number By Any Other Value Would... False-y Comparisons Sanity Check Safely Using Implicit Coercion Abstract Relational Comparison Chapter 5 Statements & Expressions Statement Completion Values Expression Side Effects Contextual Rules { .. } Curly Braces Object Literals Labels Blocks Object Destructuring else if And Optional Blocks Short Circuited Tighter Binding Associativity Disambiguation Automatic Semicolons Error Correction Errors Using Variables Too Early Function Arguments try..finally switch Chapter 1 In JavaScript, variables don't have types -- values have types. Variables can hold any value, at any time. \"not defined\" means the var being not declared. undefined means the var doesn't have a value. undefined is our friend to check if the var has a value. typeof returns undefined for both undeclared and undefined var Chapter 2 Array are also objects which can have keys/values. String is an array consisting of immutable chars. Meanwhile array has lots of usable functions String don't have. Use split to convert string to array then do the things. Or use the array from the start. Number:toFixed(digit) is similar to toPrecision(digit) 0.1+0.2 !== 0.3 We can use this Number.EPSILON to compare two numbers for \"equality\" (within the rounding error tolerance) void: here's where don't understand, what's the use? I might look into it sometimes. isNaN: 2 / \"foo\" etc Infinity: 1/0 Object.is(a,b): Special Equality Chapter 3 They are constructors of type wrappers: String() Number() Boolean() Array() Object() Function() RegExp() Date() Error() Symbol() -- added in ES6! For example, var s = new String( \"Hello World!\" ); constructs a String wrapper. To convert it to String, s.toString() . Internal [[class]] can be inspected using Object.prototype.toString.call() . Boxing wrapper is type wrapper having methods. Thankfully, JS will automatically box the primitive value to do methods. No need in doing things like new String(\"abc\") , just use the primitive values like \"abc\" . Boolean wrapper created by new boolean() is truthy itself no matter it's true or false. Use valueof() to unbox the warpper and get the value. var a = new String ( \"abc\" ); a . valueof (); Unboxing can happen implicitly: var a = new String ( \"abc\" ); var b = a + \"\" ; // `b` has the unboxed primitive value \"abc\" typeof a ; // \"object\" typeof b ; // \"string\" Just as we've seen above with the other natives, these constructor forms should generally be avoided, unless you really know you need them, mostly because they introduce exceptions and gotchas that you probably don't really want to deal with. var a = new Array ( 3 ); var b = [ undefined , undefined , undefined ]; var c = []; c . length = 3 ; a ; b ; c ; a . join ( \"-\" ); // \"--\" b . join ( \"-\" ); // \"--\" a . map ( function ( v , i ){ return i ; }); // [ undefined x 3 ] b . map ( function ( v , i ){ return i ; }); // [ 0, 1, 2 ] Bottom line: never ever, under any circumstances, should you intentionally create and use those empty-slot arrays. Just don't do it. They're nuts. Also optional: Object(..), Function(..), and RegExp(..) The Date(..) and Error(..) native constructors are much more useful than the other natives, because there is no literal form for either. Date.now() shows a time value. throw new Error(\"x wasn't provided\") throw a new error \"x wasn't provided\" . In addition to Error() , there are several specific-error-type natives though it's rare to use them manually: EvalError(..) , RangeError(..) , ReferenceError(..) , SyntaxError(..) , TypeError(..) , and URIError(..) . Symbol are unique in that you are not allowed to use new with it. Using them for private or special properties is likely their primary use-case. (Ex: Symbol.ierator , to define use Symbol(\"statement\") ) Some of the native Prototypes are aren't just plain objects: typeof Function . prototype ; // \"function\" Function . prototype (); // it's an empty function! RegExp . prototype . toString (); // \"/(?:)/\" -- empty regex \"abc\" . match ( RegExp . prototype ); // [\"\"] The chapter leads through a journey about knowing interestings underlying wrappers and prototypes. Hmm...... Hope to know something practical. Chapter 4 Coercion is controversial. Most people run away from them. Try to get it more fully though it can be confusing. Converting values JavaScript coercions always result in one of the scalar primitive (see Chapter 2) values, like string , number , or boolean . In js, most people call all the types of conversions \"coercion\". The author prefer to distinguish all the type conversion as \"implicit coercion\"(intended) vs. \"explicit coercion.\"(occurred as a side effect of some other intentional operation) Example : var a = 42 ; var b = a + \"\" ; // implicit coercion var c = String ( a ); // explicit coercion Abstract Value Operations ToString The default toString ( StObject.prototype.toString() ) returns the *internal [[Class]] . If an object has its own toString , the result will be string instead. var a = [ 1 , 2 , 3 ]; a . toString (); // \"1,2,3\" JSON Stringification Another task that seems awfully related to ToString is when you use the JSON.stringify(..) utility to serialize a value to a JSON-compatible string value. JSON . stringify ( 42 ); // \"42\" JSON . stringify ( \"42\" ); // \"\"42\"\" (a string with a quoted string value in it) JSON . stringify ( null ); // \"null\" JSON . stringify ( true ); // \"true\" JSON.stringify(..) with an object as argument can make an error thrown. var o = { }; var a = { b : 42 , c : o , d : function (){} }; // create a circular reference inside `a` o . e = a ; // would throw an error on the circular reference // JSON.stringify( a ); // define a custom JSON value serialization a . toJSON = function () { // only include the `b` property for serialization return { b : this . b }; }; JSON . stringify ( a ); // \"{\"b\":42}\" toJSON() should be interpreted as \"to a JSON-safe value suitable for stringification,\" not \"to a JSON string\" as many developers mistakenly assume. var a = { val : [ 1 , 2 , 3 ], // probably correct! toJSON : function (){ return this . val . slice ( 1 ); } }; var b = { val : [ 1 , 2 , 3 ], // probably incorrect! toJSON : function (){ return \"[\" + this . val . slice ( 1 ). join () + \"]\" ; } }; JSON . stringify ( a ); // \"[2,3]\" JSON . stringify ( b ); // \"\"[2,3]\"\" Lesser known functionality: replacer : An optional second argument can be passed to JSON.stringify(..) . Can be an array or a function . var a = { b : 42 , c : \"42\" , d : [ 1 , 2 , 3 ] }; JSON . stringify ( a , [ \"b\" , \"c\" ] ); // \"{\"b\":42,\"c\":\"42\"}\" JSON . stringify ( a , function ( k , v ){ if ( k !== \"c\" ) return v ; } ); // \"{\"b\":42,\"d\":[1,2,3]}\" space : A third argument passed to JSON.stringify(..) . Can be a positive number (how many space characters shoule be used at each indentation level) or a string (up to the first ten characters of its value will be used for each indentation level). var a = { b : 42 , c : \"42\" , d : [ 1 , 2 , 3 ] }; JSON . stringify ( a , null , 3 ); // \"{ // \"b\": 42, // \"c\": \"42\", // \"d\": [ // 1, // 2, // 3 // ] // }\" JSON . stringify ( a , null , \"-----\" ); // \"{ // -----\"b\": 42, // -----\"c\": \"42\", // -----\"d\": [ // ----------1, // ----------2, // ----------3 // -----] // }\" string , number , boolean , and null values all stringify for JSON basically the same as how they coerce to string values via the rules of the ToString abstract operation. If you pass an object value to JSON.stringify(..) , and that object has a toJSON() method on it, toJSON() is automatically called to (sort of) \"coerce\" the value to be JSON-safe before stringification. toNumber Convert a non- number value to a number . If the conversion fails, it will return a NaN instead. var a = { valueOf : function (){ return \"42\" ; } }; var b = { toString : function (){ return \"42\" ; } }; var c = [ 4 , 2 ]; c . toString = function (){ return this . join ( \"\" ); // \"42\" }; Number ( a ); // 42 Number ( b ); // 42 Number ( c ); // 42 Number ( \"\" ); // 0 Number ( [] ); // 0 Number ( [ \"abc\" ] ); // NaN toBoolean One thing to notice: 0 can be coerced to false , or 1 to true (and vice versa). But they r not the same. Falsy Values So-called falsy values will be coerced into false if you force a boolean coercion on it: undefined null false +0 , -0 , and NaN \"\" Falsy Objects As the name says, they r objects ... false .... boolean coercion .... var a = new Boolean ( false ); var b = new Number ( 0 ); var c = new String ( \"\" ); THey seem to be falsy, but that's not true: var a = new Boolean ( false ); var b = new Boolean ( 0 ); var c = new Boolean ( \"\" ); a && b && c ; // Boolean { false } a ; // Boolean { false } var d = Boolean ( a && b && c ); d ; // true var d = a && b && c ; d ; // Boolean { false } b ; // Boolean { false } c ; // Boolean { false } Boolean ( a ); // true Boolean ( b ); // true Boolean ( c ); // true A most well-known case: Boolean ( document . all ); // false document.all itself was never really \"standard\" and has long since been deprecated/abandoned. They are used as a means of detecting old, nonstandard IE. Truthy Values It's the counterpart of the falsy values. My runs for the examples: var a = \"false\" ; var b = \"0\" ; var c = \"''\" ; var d = Boolean ( a && b && c ); d ; // true a ; // \"false\" b ; // \"0\" c ; // \"''\" a && b && c ; // \"''\" var a = []; var b = {}; var c = function (){}; var d = Boolean ( a && b && c ); d ; // true To know whether a value is truthy, consult a finite falsy list. A truthy list would be infinitely long. Explicit Coercion As the name says, the coercion is explicit and obvious. Strings <==> Numbers Don't use the new keyword as in doing such a wrapped object will be created. My runs: var a = 42 ; var b = String ( a ); var c = \"3.14\" ; var d = Number ( c ); b ; // \"42\" d ; // 3.14 My runs on another way: //inherited from previously created var a, c var b = a . toString (); var d = + c ; b ; // \"42\" d ; // 3.14 Something implicit happened here: a was automatically boxed as the primitive value doesn't have the function. THe unary + is explicitly intended for number coercion. ++ and -- have the side effect like they do in c/c++. var c = \"3.14\" ; var d = 5 + - c ; d ; // 1.8599999999999999 var d = 5 + + c ; d ; // 8.14 var d = 5 + ++ c ; d ; // 9.14 var d = 5 + -- c ; d ; // 8.14 c ; // 3.1400000000000006 var d = 5 + -- c ; c ; // 2.1400000000000006 Trying to be explicit and reduce confusion , not make it worse. Date To Number Use + to coerce a date into a number that is the unix timestamp. var d = new Date ( \"2019-05-09 20:00\" ); + d ; // 1557403200000 + get the now moment as a timestamp: var now_timestamp = + new Date (); now_timestamp ; // 1557403504691 Due to a peculiar syntactic \"trick\", it's doable to omit () : var now_timestamp = + new Date ; now_timestamp ; // 1557403628543 A noncoercion approach is preferred: var timestamp = new Date (). getTime (); timestamp // 1557405924752 A more prefferred and recommended way: var timestamp = Date . now (); timestamp ; // 1557406018081 The Curious Case of the ~ It's a bitwise operator. It's pretty common to try to use indexOf(..) not just as an operation to get the position, but as a boolean check of presence/absence of a substring in another string . Here's how developers usually perform such checks: var a = \"Hello world\" ; if ( a . indexOf ( \"lo\" ) >= 0 ) { console . log ( \"True hmm.......\" ); } // True hmm....... if ( a . indexOf ( \"lo\" ) != - 1 ) { console . log ( \"Uh\" ); } // Uh if ( a . indexOf ( \"ol\" ) < 0 ) { console . log ( \"Uh\" ); } // Uh if ( a . indexOf ( \"ol\" ) == - 1 ) { console . log ( \"Uh\" ); } // Uh a . indexOf ( \"lo\" ) // 3 a . indexOf ( \"ol\" ) // -1 Whether the substring is found or not, the number is treated as true in if . ~ a . indexOf ( \"lo\" ); // -4 if ( ~ a . indexOf ( \"lo\" )) { console . log ( \"Found 'lo'\" ); } // Found 'lo' ~ a . indexOf ( \"ol\" ); // 0 !~ a . indexOf ( \"ol\" ); // true !~ a . indexOf ( \"lo\" ); // false if ( !~ a . indexOf ( \"ol\" )) { console . log ( \"Not found\" ); } // Not found if ( a . indexOf ( \"ol\" )) { console . log ( \"Found\" ); } // no output ~ takes the return value of indexOf(..) and transforms it: for the \"failure\" -1 we get the falsy 0 , and every other value is truthy. Truncating Bits ~~ to truncate the decimal part of a number . First, it only works reliably on 32-bit values. But more importantly, it doesn't work the same on negative numbers as Math.floor(..) does: Math . floor ( - 49.6 ); // -50 ~~- 49.6 ; // -49 x | 0 does the same job, but: ~~ 1 E20 / 10 ; // 166199296 ~~ 1 E20 | 0 / 10 ; // 1661992960 ( ~~ 1 E20 | 0 ) / 10 ; // 166199296 Explicitly: Parsing Numeric Strings Between parsing and type conversion: var a = \"42\" ; var b = \"42px\" ; Number ( a ); // 42 Number ( b ); // NaN parseInt ( a ); // 42 parseInt ( b ); // 42 a twin of parseInt : parseFloat In parseInt , it's safe to pass the second parameter to set the base: var min = parseInt ( \"09\" ); var hour = parseInt ( \"08\" ); min ; // 9 hour ; // 8 var hour = parseInt ( \"08\" , 8 ); hour ; // 0 var hour = parseInt ( \"09\" , 8 ); hour ; // 0 Parsing Non-Strings All output are predictable in that all js representation have some sort of default string representation: parseInt ( 1 / 0 , 18 ); // NaN parseInt ( new String ( \"42\" )); // 42 var a = { num : 21 , toString : function () { return String ( this . num * 2 ); } }; parseInt ( a ); // 42 parseInt ( 0.000008 ); // 0 parseInt ( 0.0000008 ); // 8 parseInt ( false , 16 ); // 250 parseInt ( parseInt , 16 ); // 15 parseInt ( \"0x10\" ); // 16 parseInt ( \"103\" , 2 ); // 2 Explicitly: * --> Boolean This is not recommended in js: var a = 42 ; var b = a ? true : false ; a should be coerced to boolean first. Boolean(a) and !!a are far better as explicit coercion options. var a = \"0\" ; var b = []; var b = {}; var c = []; var d = \"\" ; var e = 0 ; var f = null ; var g ; Boolean ( a ); // true Boolean ( b ); // true Boolean ( c ); // true Boolean ( d ); // false Boolean ( e ); // false Boolean ( f ); // false Boolean ( g ); // false !! a ; // true !! b ; // true !! c ; // true !! d ; // false !! e ; // false !! f ; // false !! g ; // false var a = [ 1 , function (){ /*..*/ }, 2 , function (){ /*..*/ } ]; JSON . stringify ( a ); // \"[1,null,2,null]\" JSON . stringify ( a , function ( key , val ){ if ( typeof val == \"function\" ) { // force `ToBoolean` coercion of the function return !! val ; } else { return val ; } } ); // \"[1,true,2,true]\" Implicit Coercion Simplifying Implicitly There are good part in \"implicit\", don't refuse it. I guess that what it talks about. Implicitly: Strings <==> Numbers Common concatenation: var a = \"42\" ; var b = \"0\" ; var c = 42 ; var d = 0 ; a + b ; // \"420\" c + d ; // 42 Array turned into string: var a = [ 1 , 2 ]; var b = [ 3 , 4 ]; a + b ; // \"1,23,4\" According to ES5 spec section 11.6.1, the + algorithm (when an object value is an operand) will concatenate if either operand is either already a string , or if the following steps produce a string representation. So, when + receives an object (including array ) for either operand, it first calls the ToPrimitive abstract operation (section 9.1) on the value, which then calls the [[DefaultValue]] algorithm (section 8.12.8) with a context hint of number . Coerce a number to a string: var a = 42 ; var b = a + \"\" ; b ; // \"42\" If you're using an object instead of a regular primitive number value, you may not necessarily get the same string value! Consider: var a = { valueOf : function () { return 42 ; }, toString : function () { return 4 ; } }; a + \"\" ; // \"42\" String ( a ); // \"4\" Implicitly coerce* from string to number : var a = \"3.14\" ; var b = a - 0 ; b ; // 3.14 The - operator is defined only for numeric subtraction, so a - 0 forces a 's value to be coerced to a number . While far less common, a * 1 or a / 1 would accomplish the same result, as those operators are also only defined for numeric operations. Object value with - : var a = [ 3 ]; var b = [ 1 ]; a - b ; // 2 Implicitly: Booleans --> Numbers function onlyOne ( a , b , c ) { return !! (( a && ! b && ! c ) || ( ! a && b && ! c ) || ( ! a && ! b && c )); } var a = true ; var b = false ; onlyOne ( a , b , b ); // true onlyOne ( b , b , b ); // false If there are four or more to get only one true: function onlyOne () { var sum = 0 ; for ( var i = 0 ; i < arguments . length ; i ++ ) { // skip falsy values. same as treating // them as 0's, but avoids NaN's. if ( arguments [ i ]) { sum += arguments [ i ]; } } return sum == 1 ; } var a = true ; var b = false ; onlyOne ( b , a ); // true onlyOne ( b , a , b , b , b ); // true onlyOne ( b , b ); // false onlyOne ( b , a , b , b , b , a ); // false A version using reduce(..) 1 : function onlyOne () { return Object . values ( arguments ). reduce (( total , current ) => total + current ) == 1 ; } onlyOne ( a , b , b , b , b , b , b , b , b , b , b , b , b , b , b , b , b , b , b , b , b , b , b , b , b , a ); // false onlyOne ( a , b , b , b , b , b , b , b , b , b , b , b , b , b , b , b , b , b , b , b , b , b , b , b , b ); // true Explicit version: function onlyOne () { var sum = 0 ; for ( var i = 0 ; i < arguments . length ; i ++ ) { sum += Number ( !! arguments [ i ] ); } return sum === 1 ; } Implicitly: * --> Boolean var a = 42 ; var b = \"abc\" ; var c ; var d = null ; if ( a ) { console . log ( \"yep\" ); // yep } while ( c ) { console . log ( \"nope, never runs\" ); } c = d ? a : b ; c ; // \"abc\" if (( a && d ) || c ) { console . log ( \"yep\" ); // yep } Operators || and && Quoting the ES5 spec from section 11.11: The value produced by a && or || operator is not necessarily of type Boolean. The value produced will always be the value of one of the two operand expressions. var a = 42 ; var b = \"abc\" ; var c = null ; a || b ; // 42 a && b ; // \"abc\" c || b ; // \"abc\" c && b ; // null Both operators will always test the first operands. Below, \"RES\" == \"The result of the first operands\". RES\\Operand || && true The first The second false The second The first The table tells that what will be returned from the operator in certain condition. Symbol Coercion var s1 = Symbol ( \"cool\" ); String ( s1 ); // \"Symbol(cool)\" var s2 = Symbol ( \"not cool\" ); s2 + \"\" ; // TypeError The good news: it's probably going to be exceedingly rare for you to need to coerce a symbol value. The way they're typically used (see Chapter 3) will probably not call for coercion on a normal basis. Loose Equals vs. Strict Equals Loose equals is the == operator, and strict equals is the === operator. Both operators are used for comparing two values for \"equality,\" but the \"loose\" vs. \"strict\" indicates a very important difference in behavior between the two, specifically in how they decide \"equality.\" A very common misconception about these two operators is: \" == checks values for equality and === checks both values and types for equality.\" The correct description is: \" == allows coercion in the equality comparison and === disallows coercion.\" Equality Performance If you want coercion, use == loose equality, but if you don't want coercion, use === strict equality. Note: The implication here then is that both == and === check the types of their operands. The difference is in how they respond if the types don't match. Abstract Equality Basically, the first clause (11.9.3.1) says, if the two values being compared are of the same type, they are simply and naturally compared via Identity as you'd expect. For example, 42 is only equal to 42 , and \"abc\" is only equal to \"abc\" . Some minor exceptions to normal expectation to be aware of: NaN is never equal to itself (see Chapter 2) +0 and -0 are equal to each other (see Chapter 2) The final provision in clause 11.9.3.1 is for == loose equality comparison with object s (including function s and array s). Two such values are only equal if they are both references to the exact same value . No coercion occurs here. Note: The === strict equality comparison is defined identically to 11.9.3.1, including the provision about two object values. It's a very little known fact that == and === behave identically in the case where two object s are being compared! The rest of the algorithm in 11.9.3 specifies that if you use == loose equality to compare two values of different types, one or both of the values will need to be implicitly coerced. This coercion happens so that both values eventually end up as the same type, which can then directly be compared for equality using simple value Identity. Note: The != loose not-equality operation is defined exactly as you'd expect, in that it's literally the == operation comparison performed in its entirety, then the negation of the result. The same goes for the !== strict not-equality operation. Comparing: string s to number s var a = 42 ; var b = \"42\" ; a === b ; // false a == b ; // true In the ES5 spec, clauses 11.9.3.4-5 say: If Type(x) is Number and Type(y) is String, return the result of the comparison x == ToNumber(y). If Type(x) is String and Type(y) is Number, return the result of the comparison ToNumber(x) == y. According to this, it's the string \"42\" coerced into the number 42 when the == is used. Comparing: anything to boolean var a = \"42\" ; var b = true ; a == b ; // false Let's again quote the spec, clauses 11.9.3.6-7: If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y. If Type(y) is Boolean, return the result of the comparison x == ToNumber(y). It's not performing a boolean test . The boolean was just coerced into number 1 . var a = \"42\" ; // bad (will fail!): if ( a == true ) { // .. } // also bad (will fail!): if ( a === true ) { // .. } // good enough (works implicitly): if ( a ) { // .. } // better (works explicitly): if ( !! a ) { // .. } // also great (works explicitly): if ( Boolean ( a )) { // .. } Comparing: null s to undefined s Another example of implicit coercion can be seen with == loose equality between null and undefined values. Yet again quoting the ES5 spec, clauses 11.9.3.2-3: If x is null and y is undefined, return true. If x is undefined and y is null, return true. var a = null ; var b ; a == b ; // true a == null ; // true b == null ; // true a == false ; // false b == false ; // false a == \"\" ; // false b == \"\" ; // false a == 0 ; // false b == 0 ; // false The author recommends using this coercion to allow null and undefined to be indistinguishable and thus treated as the same value. For example: var a = doSomething (); if ( a == null ) { // .. } The a == null only pass when a is either null or undefined THe uglier explicit version: var a = doSomething (); if ( a === undefined || a === null ) { // .. } It's reliable safe way of using implicit coersion. Comparing: object s to non- object s If an object / function / array is compared to a simple scalar primitive ( string , number , or boolean ), the ES5 spec says in clauses 11.9.3.8-9: If Type(x) is either String or Number and Type(y) is Object, return the result of the comparison x == ToPrimitive(y). If Type(x) is Object and Type(y) is either String or Number, return the result of the comparison ToPrimitive(x) == y. No boolean 'cause in a == sentence a boolean will always be coerced into a Number first. There are some values where this is not the case, though, because of other overriding rules in the == algorithm. Consider: var a = null ; var b = Object ( a ); // same as `Object()` a == b ; // false var c = undefined ; var d = Object ( c ); // same as `Object()` c == d ; // false var e = NaN ; var f = Object ( e ); // same as `new Number( e )` e == f ; // false The null and undefined values cannot be boxed -- they have no object wrapper equivalent -- so Object(null) is just like Object() in that both just produce a normal object. NaN can be boxed to its Number object wrapper equivalent, but when == causes an unboxing, the NaN == NaN comparison fails because NaN is never equal to itself (see Chapter 2). Edge Cases This section the worst, craziest corner cases will be called so we can see what we need to avoid to not get bitten with coercion bugs. A Number By Any Other Value Would... Number . prototype . valueOf = function () { return 3 ; }; new Number ( 2 ) == 3 ; // true It's trap that should be avoided. var i = 2 ; Number . prototype . valueOf = function () { return i ++ ; }; var a = new Number ( 42 ); if ( a == 2 && a == 3 ) { console . log ( \"Yep, this happened.\" ); } // Yep, this happened. Avoid these crazy tricks, and stick only with valid and proper usage of coercion. False-y Comparisons \"0\" == null ; // false \"0\" == undefined ; // false \"0\" == false ; // true -- UH OH! \"0\" == NaN ; // false \"0\" == 0 ; // true \"0\" == \"\" ; // false false == null ; // false false == undefined ; // false false == NaN ; // false false == 0 ; // true -- UH OH! false == \"\" ; // true -- UH OH! false == []; // true -- UH OH! false == {}; // false \"\" == null ; // false \"\" == undefined ; // false \"\" == NaN ; // false \"\" == 0 ; // true -- UH OH! \"\" == []; // true -- UH OH! \"\" == {}; // false 0 == null ; // false 0 == undefined ; // false 0 == NaN ; // false 0 == []; // true -- UH OH! 0 == {}; // false UH OH! comparisons are false positives. [] == ! []; // true 2 == [ 2 ]; // true \"\" == [ null ]; // true 0 == \"\\n\" ; // true To contrast against these 24 likely suspects for coercion gotchas, consider another list like this: 42 == \"43\" ; // false \"foo\" == 42 ; // false \"true\" == true ; // false 42 == \"42\" ; // true \"foo\" == [ \"foo\" ]; // true In these nonfalsy, noncorner cases (and there are literally an infinite number of comparisons we could put on this list), the coercion results are totally safe, reasonable, and explainable. Sanity Check Avoid list in coercion: \"0\" == false ; // true -- UH OH! false == 0 ; // true -- UH OH! false == \"\" ; // true -- UH OH! false == []; // true -- UH OH! \"\" == 0 ; // true -- UH OH! \"\" == []; // true -- UH OH! 0 == []; // true -- UH OH! Boolean in == should be avoided. And it was mentioned before. So the list is down to three: \"\" == 0 ; // true -- UH OH! \"\" == []; // true -- UH OH! 0 == []; // true -- UH OH! Safely Using Implicit Coercion Some heuristic rules to follow: If either side of the comparison can have true or false values, don't ever, EVER use == . If either side of the comparison can have [] , \"\" , or 0 values, seriously consider not using == . Being more explicit/verbose in these cases will save you from a lot of headaches. Abstract Relational Comparison var a = [ 42 ]; var b = [ \"43\" ]; a < b ; // true b < a ; // false Similar to == var a = [ \"42\" ]; var b = [ \"043\" ]; a < b ; // false a and b are not coerced to number s, because both of them end up as string s after the ToPrimitive coercion on the two array s. So, \"42\" is compared character by character to \"043\" , starting with the first characters \"4\" and \"0\" , respectively. Since \"0\" is lexicographically less than than \"4\" , the comparison returns false . var a = { b : 42 }; var b = { b : 43 }; a < b ; // ?? a < b is also false , because a becomes [object Object] and b becomes [object Object] , and so clearly a is not lexicographically less than b . Strange: var a = { b : 42 }; var b = { b : 43 }; a < b ; // false a == b ; // false a > b ; // false a <= b ; // true a >= b ; // true a <= b is just the opposite result of a < b If coercion is helpful and reasonably safe, like in a 42 < \"43\" comparison, use it . On the other hand, if you need to be safe about a relational comparison, explicitly coerce the values first, before using < (or its counterparts). var a = [ 42 ]; var b = \"043\" ; a < b ; // false -- string comparison! Number ( a ) < Number ( b ); // true -- number comparison! Chapter 5 Talking about js' grammer. Statements & Expressions var a = 3 * 6 ; var b = a ; b ; Expressions: 3 * 6 on the first line, a on the second line. Statements: each of the three lines. Statement Completion Values var 's completion value is empty ( undefined ) due to the value swallowed up. undefined is quite common as completion values. var b ; if ( true ) { b = 4 + 38 ; } This returns 42. In other words, the completion value of a block is like an implicit return of the last statement value in the block. To catch the completion value: (Only demo, don't do it. eval(..) sometimes pronounced \"evil\") var a , b ; a = eval ( \"if (true) { b = 4 + 38; }\" ); a ; // 42 There's a proposal for ES7 called \"do expression.\" Here's how it might work: var a , b ; a = do { if ( true ) { b = 4 + 38 ; } }; a ; // 42 Expression Side Effects function foo () { a = a + 1 ; } var a = 1 ; foo (); // result: `undefined`, side effect: changed `a` var a = 42 ; var b = a ++ ; a ; // 43 b ; // 42 THe same behaviour in C code: var a = 42 ; a ++ ; // 42 a ; // 43 ++ a ; // 44 a ; // 44 The expression a++ has two separate behaviors. First , it returns the current value of a , which is 42 (which then gets assigned to b ). But next , it changes the value of a itself, incrementing it by one. var a = 42 , b ; b = ( a ++ , a ); a ; // 43 b ; // 43 Note: The ( .. ) around a++, a is required here. The reason is operator precedence, which we'll cover later in this chapter. var obj = { a : 42 }; obj . a ; // 42 delete obj . a ; // true obj . a ; // undefined The result value of the delete operator is true if the requested operation is valid/allowable, or false otherwise. But the side effect of the operator is that it removes the property (or array slot). var a ; a = 42 ; // 42 a ; // 42 It may not seem like = in a = 42 is a side-effecting operator for the expression. But if we examine the result value of the a = 42 statement, it's the value that was just assigned ( 42 ), so the assignment of that same value into a is essentially a side effect. var a , b , c ; a = b = c = 42 ; Here, c = 42 is evaluated to 42 (with the side effect of assigning 42 to c ), then b = 42 is evaluated to 42 (with the side effect of assigning 42 to b ), and finally a = 42 is evaluated (with the side effect of assigning 42 to a ). Another scenario to consider: function vowels ( str ) { var matches ; if ( str ) { // pull out all the vowels matches = str . match ( /[aeiou]/g ); if ( matches ) { return matches ; } } } vowels ( \"Hello World\" ); // [\"e\",\"o\",\"o\"] This works, and many developers prefer such. But using an idiom where we take advantage of the assignment side effect, we can simplify by combining the two if statements into one: function vowels ( str ) { var matches ; // pull out all the vowels if ( str && ( matches = str . match ( /[aeiou]/g ))) { return matches ; } } vowels ( \"Hello World\" ); // [\"e\",\"o\",\"o\"] Note: The ( .. ) around matches = str.match.. is required. The reason is operator precedence, which we'll cover in the \"Operator Precedence\" section later in this chapter. I prefer this shorter style, as I think it makes it clearer that the two conditionals are in fact related rather than separate. But as with most stylistic choices in JS, it's purely opinion which one is better . Contextual Rules { .. } Curly Braces Object Literals // assume there's a `bar()` function defined var a = { foo : bar () }; How do we know this is an object literal? Because the { .. } pair is a value that's getting assigned to a . Labels JS does support a limited, special form of goto : labeled jumps. // `foo` labeled-loop foo : for ( var i = 0 ; i < 4 ; i ++ ) { for ( var j = 0 ; j < 4 ; j ++ ) { // whenever the loops meet, continue outer loop if ( j == i ) { // jump to the next iteration of // the `foo` labeled-loop continue foo ; } // skip odd multiples if (( j * i ) % 2 == 1 ) { // normal (non-labeled) `continue` of inner loop continue ; } console . log ( i , j ); } } // 1 0 // 2 0 // 2 1 // 3 0 // 3 2 The use of break : // `foo` labeled-loop foo : for ( var i = 0 ; i < 4 ; i ++ ) { for ( var j = 0 ; j < 4 ; j ++ ) { if (( i * j ) >= 3 ) { console . log ( \"stopping!\" , i , j ); // break out of the `foo` labeled loop break foo ; } console . log ( i , j ); } } // 0 0 // 0 1 // 0 2 // 0 3 // 1 0 // 1 1 // 1 2 // stopping! 1 3 Blocks [] + {}; // \"[object Object]\" {} + []; // 0 Object Destructuring Starting with ES6, another place that you'll see { .. } pairs showing up is with \"destructuring assignments\" (see the ES6 & Beyond title of this series for more info), specifically object destructuring. Consider: function getData () { // .. return { a : 42 , b : \"foo\" }; } var { a , b } = getData (); console . log ( a , b ); // 42 \"foo\" Object destructuring with a { .. } pair can also be used for named function arguments, which is sugar for this same sort of implicit object property assignment: function foo ({ a , b , c }) { // no need for: // var a = obj.a, b = obj.b, c = obj.c console . log ( a , b , c ); } foo ( { c : [ 1 , 2 , 3 ], a : 42 , b : \"foo\" } ); // 42 \"foo\" [1, 2, 3] else if And Optional Blocks It's a common misconception that JavaScript has an else if clause, because you can do: if ( a ) { // .. } else if ( b ) { // .. } else { // .. } But there's a hidden characteristic of the JS grammar here: there is no else if . But if and else statements are allowed to omit the { } around their attached block if they only contain a single statement. You've seen this many times before, undoubtedly: if ( a ) doSomething ( a ); However, the exact same grammar rule applies to the else clause, so the else if form you've likely always coded is actually parsed as: if ( a ) { // .. } else { if ( b ) { // .. } else { // .. } } Recall the example from above: var a = 42 , b ; b = ( a ++ , a ); a ; // 43 b ; // 43 But what would happen if we remove the ( ) ? var a = 42 , b ; b = a ++ , a ; a ; // 43 b ; // 42 Because the , operator has a lower precedence than the = operator. Now, recall this example from above: if ( str && ( matches = str . match ( /[aeiou]/g ))) { // .. } We said the ( ) around the assignment is required, but why? Because && has higher precedence than = , so without the ( ) to force the binding, the expression would instead be treated as (str && matches) = str.match.. . But this would be an error, because the result of (str && matches) isn't going to be a variable, but instead a value (in this case undefined ), and so it can't be the left-hand side of an = assignment! Short Circuited This short circuiting can be very helpful and is commonly used: function doSomething ( opts ) { if ( opts && opts . cool ) { // .. } } Similarly, you can use || short circuiting: function doSomething ( opts ) { if ( opts . cache || primeCache ()) { // .. } } Tighter Binding a && b || c ? c || b ? a : c && b : a Is that more like this: a && b || ( c ? c || ( b ? a : c ) && b : a ) or this? ( a && b || c ) ? ( c || b ) ? a : ( c && b ) : a The answer is the second one. But why? Because && is more precedent than || , and || is more precedent than ? : . ( && > || > || ) Associativity In general, operators are either left-associative or right-associative, referring to whether grouping happens from the left or from the right . Technically, a && b && c will be handled as (a && b) && c , because && is left-associative (so is || , by the way). However, the right-associative alternative a && (b && c) behaves observably the same way. For the same values, the same expressions are evaluated in the same order. So it doesn't really matter that much that && and || are left-associative, other than to be accurate in how we discuss their definitions. But that's not always the case. Some operators would behave very differently depending on left-associativity vs. right-associativity. The ? : (\"ternary\" or \"conditional\") operator is right-associative: a ? b : c ? d : e ; Disambiguation use operator precedence/associativity where it leads to shorter and cleaner code, but use ( ) manual grouping in places where it helps create clarity and reduce confusion. Automatic Semicolons JS won't treat c as the next line as part of the var statement if no , is between b and c : var a = 42 , b c ; Similar: var a = 42 , b = \"foo\" ; a b // \"foo\" Where ASI is helpful: var a = 42 ; do { // .. } while ( a ) // <-- ; expected here! a ; Statement blocks do not require ; termination, so ASI isn't necessary: var a = 42 ; while ( a ) { // .. } // <-- no ; expected here a ; The other major case where ASI kicks in is with the break , continue , return , and (ES6) yield keywords: function foo ( a ) { if ( ! a ) return a *= 2 ; // .. } The return statement doesn't carry across the newline to the a *= 2 expression, as ASI assumes the ; terminating the return statement. Of course, return statements can easily break across multiple lines, just not when there's nothing after return but the newline/line break. function foo ( a ) { return ( a * 2 + 3 / 12 ); } Identical reasoning applies to break , continue , and yield . Error Correction The author: use semicolons wherever you know they are \"required,\" and limit your assumptions about ASI to a minimum. But don't just take my word for it. Back in 2012, creator of JavaScript Brendan Eich said (http://brendaneich.com/2012/04/the-infernal-semicolon/) the following: The moral of this story: ASI is (formally speaking) a syntactic error correction procedure. If you start to code as if it were a universal significant-newline rule, you will get into trouble. .. I wish I had made newlines more significant in JS back in those ten days in May, 1995. .. Be careful not to use ASI as if it gave JS significant newlines. Errors Invalid syntax: var a = /+foo/ ; // Error! The wrong target of an assignment: var a ; 42 = a ; // Error! ES5's strict mode defines even more early errors. For example, in strict mode, function parameter names cannot be duplicated: function foo ( a , b , a ) { } // just fine function bar ( a , b , a ) { \"use strict\" ; } // Error! Another strict mode early error is an object literal having more than one property of the same name: ( function (){ \"use strict\" ; var a = { b : 42 , b : 43 }; // Error! })(); Using Variables Too Early ES6 defines a (frankly confusingly named) new concept called the TDZ (\"Temporal Dead Zone\"). The TDZ refers to places in code where a variable reference cannot yet be made, because it hasn't reached its required initialization. { a = 2 ; // ReferenceError! let a ; } The assignment a = 2 is accessing the a variable (which is indeed block-scoped to the { .. } block) before it's been initialized by the let a declaration, so it's in the TDZ for a and throws an error. Interestingly, while typeof has an exception to be safe for undeclared variables (see Chapter 1), no such safety exception is made for TDZ references: { typeof a ; // undefined typeof b ; // ReferenceError! (TDZ) let b ; } Function Arguments Another example of a TDZ violation can be seen with ES6 default parameter values (see the ES6 & Beyond title of this series): var b = 3 ; function foo ( a = 42 , b = a + b + 5 ) { // .. } The b reference in the assignment would happen in the TDZ for the parameter b (not pull in the outer b reference), so it will throw an error. However, the a in the assignment is fine since by that time it's past the TDZ for parameter a . When using ES6's default parameter values, the default value is applied to the parameter if you either omit an argument, or you pass an undefined value in its place: function foo ( a = 42 , b = a + 1 ) { console . log ( a , b ); } foo (); // 42 43 foo ( undefined ); // 42 43 foo ( 5 ); // 5 6 foo ( void 0 , 7 ); // 42 7 foo ( null ); // null 1 Note: null is coerced to a 0 value in the a + 1 expression. See Chapter 4 for more info. Even though the default parameter values are applied to the a and b parameters, if no arguments were passed in those slots, the arguments array will not have entries: function foo ( a = 42 , b = a + 1 ) { console . log ( arguments . length , a , b , arguments [ 0 ], arguments [ 1 ] ); } foo (); // 0 42 43 undefined undefined foo ( 10 ); // 1 10 11 10 undefined foo ( 10 , undefined ); // 2 10 11 10 undefined foo ( 10 , null ); // 2 10 null 10 null While ES6 default parameter values can create divergence between the arguments array slot and the corresponding named parameter variable, this same disjointedness can also occur in tricky ways in ES5: function foo ( a ) { a = 42 ; console . log ( arguments [ 0 ] ); } foo ( 2 ); // 42 (linked) foo (); // undefined (not linked) Note: Never refer to a named parameter and its corresponding arguments slot at the same time. try..finally What happens if there's a return statement inside a try clause? It obviously will return a value, right? But does the calling code that receives that value run before or after the finally ? function foo () { try { return 42 ; } finally { console . log ( \"Hello\" ); } console . log ( \"never runs\" ); } console . log ( foo () ); // Hello // 42 The exact same behavior is true of a throw inside try : function foo () { try { throw 42 ; } finally { console . log ( \"Hello\" ); } console . log ( \"never runs\" ); } console . log ( foo () ); // Hello // Uncaught Exception: 42 function foo () { try { return 42 ; } finally { // no `return ..` here, so no override } } function bar () { try { return 42 ; } finally { // override previous `return 42` return ; } } function baz () { try { return 42 ; } finally { // override previous `return 42` return \"Hello\" ; } } foo (); // 42 bar (); // undefined baz (); // \"Hello\" Using a finally + labeled break to effectively cancel a return is doing your best to create the most confusing code possible. switch Coersive equality: var a = \"42\" ; switch ( true ) { case a == 10 : console . log ( \"10 or '10'\" ); break ; case a == 42 : console . log ( \"42 or '42'\" ); break ; default : // never gets here } // 42 or '42' Array.prototype.reduce() - JavaScript | MDN ↩","tags":"Terminal","url":"https://archives.snorl.ax/terminal/2019/05/07/notes-on-types-grammer-ydjs/"},{"title":"Start to enjoy music","text":"Not to stuff the place with useless things. I think the category Enjoy is too empty! It's not due to lack of joy in my life, but too many new things to try for me. I'm now enjoying my life by trying some things, such as trying Arch Linux on a Virtualbox, wandering around laptops (though there's no need to obtain another one). In the near future, I'll make a switch from Debian to Arch Linux when there's a wired network for me. And I'll make a post in the category Try about the process. Arch Linux could be as much lightweight as u want! Back to the topic, music. Lately Katy Perry has released two singles, \"Chained to the Rhythm\" and \"Bon Appétit\", for her upcoming fifth album, \"Witness\". Speaking of the singer, who is famous for her well sold singles and albums, I actually didn't pay much attention to her just 'cause of her being that famous, until I heard her debut album, \"One of the boys\". Katy Perry - One of the boys 1. One of the Boys Here comes a cute girl who wants to be one of ur girls! Katy is cute and desperate for a true love despite being that strong. The flower is the desire from a woman waiting to be loved. Would u? 2. I Kissed A Girl Click to watch the video She did and liked it! One funny thing about the song: Whether u r a boy or a girl, u r most likely to admit u r gay when u sing it! \"I kissed a girl and I liked it! Hope my boyfriend don't mind it!\" 3. Waking Up in Vegas Click to watch the video Not until I saw the video did I get the meaning of the song. About gambler and debt? I thought it was about cruelty and difficulty in a big city! 4. Thinking Of You Click to watch the video I love the sad song and love the video. It's about her beloved and lost lover. She expresses the feeling in her own way and voice. Click to watch the extended video about the story behind that video 5. Mannequin She fell in love with a dead machine? Stupid story of a cute girl! Just toss it! 6. Ur So Gay She must know gays pretty well. :D 7. Hot n Cold Click to watch the video I like the video pretty much. She looks a drama! 8. If You Can Afford Me A loving me could also buy me. &#94;0&#94; 9. Lost The song is talking about her striving in a new city, lost among fair-weather friends and many things. \"Know the way and still so lost\". It might be talking about the story of us. We, as a young individual, are living on our own in such a situation. Kinda love the song and in sync with it. 10. Self Inflicted A \"stick to loving u though being hurt\" song~ Amazing background music~ 11. I'm Still Breathing Breathing....... And listen to the songs below....... Songs say louder than words. 12. Fingerprints 13. I Think I'm Ready 14. A Cup of Coffee 15. Electric Feel 16. Black and Gold Generally it's a wonderful album. All of the songs r written by Katy Perry. Cute songs! BTW, I do not hook up and Long shot from Kelly Clarkson's All I Ever Wanted r written by Katy Perry too. However, I don't like her new \"fun and dance-y and dark and light\" style. But I'll keep watching. She made a brilliant debut. It's relaxing to listen to this radio station with nothing to worry. After these, here comes an experimental song, Lost River: . It's nice to listen to this when u r down...... If u like, watch this:","tags":"Browser","url":"https://archives.snorl.ax/browser/2017/05/22/start-to-enjoy-music/"},{"title":"Enjoy The Life!","text":"Categories r renamed! 2016-07-04: DIY has been renamed to Try , and Life has been renamed to Enjoy . Kinda personal. 2018-01-22: The name of the collection Life has changed to Browser . Still, enjoy the life in a browser! BTW, Try has changed to Terminal . Death Of A Bachelor 2017-07-04: Finally I've got it! 😀 2018-01-22: Just became a user of Google Music. Digital Music is much more portable and suitable for me now! New look! 2018-01-22: Minimal life is efficient! Isn't it?","tags":"Browser","url":"https://archives.snorl.ax/browser/2016/07/04/enjoy-the-life/"},{"title":"Panic! At The Disco - Bohemian Rhapsody","text":"Yesterday at Kate's Blog , I was really glad to see the song on their BBC Radio 1 Big Weekend! So I searched Youtube for it! I'd like to say, WOW BTW, Kate's Blog One Fall Out At The Disco is really my piece of cake and she shares many same thought as mine! Back to the point, enjoy Urie's Bohemian Rhapsody on his BBC Radio 1 Big Weekend: The performance above beat this one with most views on the Youtube(Personally, I think Urie sang in a more relaxed way in the one above. Both r fantastic!):","tags":"Browser","url":"https://archives.snorl.ax/browser/2016/06/04/panic-at-the-disco-bohemian-rhapsody/"},{"title":"Linda Perry - In Flight","text":"Listened to Linda Perry's In Flight, it's a really gorgeous and peaceful album! In My Dream Sad accompaniment with a strong voice hit my head. Really impressive start! Favourite Lyrics: I want everything / Everything I want / There's no room to turn me upside down Freeway Peaceful music is followed by exciting music. Then in the end it comes back to peace. Yep take me down the freeway! Favourite Lyrics: To be free, of everything / Of everything, yeah Uninvited Start to believe Jesus after hearing. The song is full of happiness and peace. Favourite Lyrics: R u ready? Ready for it all! Success Enormous start. Grave song. Yep, \"Is it what I need\"\" Favourite Lyrics: Will success fail me? / Will it make me free? / What they tell me I should want? / Is it what I need? Life in a bottle Starting with waves makes me groovy. Favourite Lyrics: So there's nothing let for me to say / No there's nothing let for me to say Fill me Up Fill me up let's take a ride! No more answering Favourite Lyrics: Fill me up lets take a ride Knock me out Grave again. Favourite Lyrics: You knocked me out / I can never be the same Too Deep Thoughtful...... Favourite Lyrics: I'm just a dreamer / I can't wake from sleep / I am midflyer / But I'm getting too deep Taken I'm taken too Favourite Lyrics: And by my sweet thighs / I'm still taken Fruitloop Daydream This song bring me back to life again! Favourite Lyrics: Waking up in the dark / Knowing I'm not alone, it's all so familiar Machine Man Machine man machine song. Favourite Lyrics: No lyrics preferred In Flight The start took me in a free flight. Then it made me groovy as the song went on. Favourite Lyrics: (all the other birds) x4","tags":"Browser","url":"https://archives.snorl.ax/browser/2016/05/22/linda-perry-in-flight/"},{"title":"12 Ways To Eat Clean All Season Long","text":"Live a little! We've got the 12 cleanest, healthiest, low- and no-carb picks found throughout the holiday season. Healthy holidays are happy holidays! (Source: BodyBuilding ) The holidays are almost upon us—and with them, a not-so-merry minefield of edible indulgences. Becoming savvy about the chemical makeup of what's on the buffet table—be it pre-packaged cookies, frozen hors d'oeuvres, processed grains, or refined sugars—can keep you lean and fit without your missing out on the fun. \"Clean eating is about avoiding packaged products and engaging in a diet rich in non-processed foods—things that come from the earth,\" says Manhattan-based nutritionist Sharon Richter, R.D. \"Think fruits, vegetables, and lean protein sources, like fish.\" Give yourself the gift of good eating this season with 12 of our favorite ways to indulge in the flavor of the holidays without packing on pounds. 1 / Dark Green Vegetables These healthy finger foods are a powerful source of cardiovascular-boosting folate and also very low in carbs (four spears of asparagus contain only 2.5 grams). So, whether it's raw broccoli , asparagus, or baked kale chips, these slimming snacks have the satisfying bonus of crunch. 2 / Shellfish Found on many a holiday-party table, shrimp cocktail, raw oysters , and clams with a spritz of lemon add a super-low-fat, no-carb protein punch to festive snacking, with an added boost of zinc and vitamins B and D . 3 / Cinnamon Not only does this spice conjure up images of warm kitchens and festive baked goods, it also happens to be incredibly good for you. A natural bacteria fighter and memory booster, cinnamon is also a great flavor enhancer on treats like baked apples , Richter says. One teaspoon has only two grams of carbs and six calories. 4 / Matcha It's easy to be tempted by a high-calorie, cream-laden latte, but one tall Starbuck's peppermint white-chocolate mocha has 410 calories and 15 grams of fat. Instead, opt for matcha. This powdered, whole-leaf green tea has zero carbs and is loaded with antioxidants that boost energy and improve brain function. 5 / Lean Meats Opt for lean, baked turkey or chicken breast at the party's carving station and you can have a clean, protein-packed meal with half the fat of beef. Bonus: A three-ounce serving is a low-carb treat with nearly 20 grams of protein. 6 / Pomegranate Pomegranates are abundant during the winter months (and make a festive centerpiece at any holiday gathering). They're also a potent source of antioxidants kicking bad cholesterol, jacked-up blood pressure, and carcinogens to the curb. A half cup of seeds has 16 grams of carbohydrates, but it's also got three healthy grams of fiber and 15 percent of your daily dose of vitamin C. 7 / Tomatoes Condiments are a big no-no when trying to eat clean, so instead of reaching for corn-syrup-laden ketchup or sodium-packed salsa , go for chopped tomatoes with slivered fresh basil for minimal carbs and plenty of vitamin C. 8 / Dark Chocolate It's kind of hard to believe something that tastes so decadent could be good for cardiovascular health—not to mention can help fight premature aging and cancer. But it's true: A one-ounce square is only a 13-gram carbohydrate indulgence. 9 / Roasted Garlic Aromatically irresistible and delicious as a spread on whole-grain toast points, garlic is also a powerful antioxidant and immune-boosting power food that increases blood flow and lowers cholesterol. That's not all: One clove of roasted garlic has only one gram of carbs. 10 / Citrus Abundant in the winter months, citrus fruits are versatile, colorful, immune-boosting beverage companions. Yes, fruit does have carbs—that six-ounce glass of orange juice has 18 grams per ounce—but it's accompanied by a whopping 150% serving of your daily requirement of vitamin C. 11 / Salmon At your next holiday party, feel free to indulge in that plate of salmon . You'll get not just a healthy shot of omega-3 fatty acids but a jolt of B3s and 12s to boot, says Richter. Just make sure you look for wild-sourced versions, as they tend to be healthier than farmed fish. 12 / Whole Grains Refined grains have their healthy bran and germ stripped away, so all their good-for-you properties are lost in the process, too. Whole-grain crackers , bread , pita, popcorn, and brown rice , on the other hand, are great sources of munchable complex carbohydrates (a one-ounce serving of whole-wheat crackers has about 19 grams of carbs, and the carb content of one cup of airpopped popcorn is only six grams) with loads of magnesium, selenium, and fiber. They're also low in fat but big on texture and flavor.","tags":"Browser","url":"https://archives.snorl.ax/browser/2016/05/13/12-ways-to-eat-clean-all-season-long/"}]}